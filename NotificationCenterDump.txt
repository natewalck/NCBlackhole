//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

#pragma mark -

//
// File: /Users/jerrymarino/Desktop/NotificationCenter
// UUID: ED2FC78D-FDFB-37D7-8DD3-1D3938E983DF
//
//                           Arch: x86_64
//                 Source version: 222.5.0.0.0
//       Minimum Mac OS X version: 10.9.0
//                    SDK version: 10.9.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol NCAlertButtonDelegate <NSObject>
- (void)alertButton:(NCAlertButton *)arg1 itemSelectedWithContext:(id)arg2;
- (void)alertButton:(NCAlertButton *)arg1 createItemsUsingBlock:(void (^)(NSString *, id))arg2;
- (BOOL)alertButtonHasDelayedMenu:(NCAlertButton *)arg1;
@end

@protocol NCAlertProviderDelegate <NSObject>
- (void)alertProvider:(NCAlertProvider *)arg1 removeAlert:(NCPlaceholderAlert *)arg2;
- (void)alertProvider:(NCAlertProvider *)arg1 showAlert:(NCPlaceholderAlert *)arg2 animation:(int)arg3 restore:(_Bool)arg4;
@end

@protocol NCAppHeaderGroupViewDelegate <NSObject>
- (void)windowHeightAndTopOffset:(void (^)(double, double))arg1;
@end

@protocol NCAppInfoDelegate <NSObject>
- (void)app:(NCAppInfo *)arg1 foundAtLocation:(NSString *)arg2;
- (void)appUnreadNotificationsChanged:(NCAppInfo *)arg1;
@end

@protocol NCBannerAnimationDelegate <NSObject>
- (void)bannerAnimationDoneRaisedWindowLevel:(NCBannerAnimation *)arg1;
- (void)bannerAnimationNeedsRaisedWindowLevel:(NCBannerAnimation *)arg1;
@end

@protocol NCBannerDelegate <NCNotificationWindowDelegate>
- (void)bannerShouldDismiss:(NCBanner *)arg1;
- (void)bannerContentClicked:(NCBanner *)arg1;
- (void)bannerTextCleared:(NCBanner *)arg1;
- (void)bannerTextTyped:(NCBanner *)arg1;
- (void)bannerHidInlineReply:(NCBanner *)arg1;
- (void)bannerShowedInlineReply:(NCBanner *)arg1;
- (void)banner:(NCBanner *)arg1 snoozedWithTimeInterval:(double)arg2;
- (void)bannerClose:(NCBanner *)arg1;
- (void)bannerPerformActionAndDismiss:(NCBanner *)arg1;
@end

@protocol NCBannerViewControllerDelegate <NSObject>

@optional
- (void)bannerViewEventTimeEnded:(NCBaseBannerViewController *)arg1;
@end

@protocol NCBannerWindowControllerDelegate <NSObject>
- (void)bannerWindow:(NCBannerWindowController *)arg1 windowsHiddenDueToOverflow:(NSArray *)arg2;
- (void)bannerWindowOrderedOut:(NCBannerWindowController *)arg1;
- (_Bool)bannerWindowCanBecomeKey:(NCBannerWindowController *)arg1;
@end

@protocol NCDebugWindowDelegate <NSObject>
- (void)debugWindowScreenlockModeChanged:(NCDebugWindow *)arg1;
- (void)debugWindowDoNotDisturbModeChanged:(NCDebugWindow *)arg1;
@end

@protocol NCEventTrapWindowDelegate <NSWindowDelegate>

@optional
- (BOOL)eventWindow:(NCEventTrapWindow *)arg1 keyDownWithEvent:(NSEvent *)arg2;
@end

@protocol NCNotificationCenterDelegate <NSObject>
- (void)notificationCenter:(NCNotificationCenter *)arg1 clearBannersForApplication:(NCAppInfo *)arg2;
- (void)notificationCenter:(NCNotificationCenter *)arg1 progressRemoved:(NCModel *)arg2;
- (void)notificationCenter:(NCNotificationCenter *)arg1 progressAdded:(NCModel *)arg2;
- (void)notificationCenter:(NCNotificationCenter *)arg1 alertChanged:(NSUserNotification *)arg2 forApplication:(NCAppInfo *)arg3;
- (void)notificationCenter:(NCNotificationCenter *)arg1 restoreSnoozedAlert:(NSUserNotification *)arg2 forApplication:(NCAppInfo *)arg3;
- (void)notificationCenter:(NCNotificationCenter *)arg1 removeDisplayedNotification:(NSUserNotification *)arg2 forApplication:(NCAppInfo *)arg3;
- (void)notificationCenter:(NCNotificationCenter *)arg1 restoreAlerts:(NSArray *)arg2 forApplication:(NCAppInfo *)arg3;
- (void)notificationCenter:(NCNotificationCenter *)arg1 presentNotification:(NSUserNotification *)arg2 forApplication:(NCAppInfo *)arg3 withUnpresentedCount:(unsigned long long)arg4;
- (void)notificationCenter:(NCNotificationCenter *)arg1 applicationRemoved:(NCAppInfo *)arg2;
- (void)notificationCenter:(NCNotificationCenter *)arg1 applicationUpdated:(NCAppInfo *)arg2;
- (void)notificationCenter:(NCNotificationCenter *)arg1 applicationOrderChanged:(NSArray *)arg2;
- (void)notificationCenter:(NCNotificationCenter *)arg1 hasUnreadNotifications:(BOOL)arg2;
- (void)notificationCenterDataReloaded:(NCNotificationCenter *)arg1;
- (void)notificationCenterConnectionError:(NCNotificationCenter *)arg1;
@end

@protocol NCNotificationTableCellHeight <NSObject>
@property(readonly) float height;
@end

@protocol NCNotificationTableDataSource <NSObject>
@property(readonly, nonatomic) BOOL hasUnreadNotifications;
@property(readonly, nonatomic) NSArray *applicationOrder;
- (void)registerWidgets:(NSArray *)arg1;
- (void)viewNotification:(NSUserNotification *)arg1 forApplication:(NCAppInfo *)arg2;
- (void)clearUnreadNotifications;
- (void)clearNotificationsForApplication:(NCAppInfo *)arg1;
- (NCAppInfo *)applicationForIdentifier:(NSString *)arg1;
@end

@protocol NCNotificationWindowDelegate <NSObject>
- (void)notificationWindow:(NCNotificationWindow *)arg1 velocity:(double)arg2 draggedCompleted:(BOOL)arg3;
- (void)notificationWindow:(NCNotificationWindow *)arg1 dragged:(NSEvent *)arg2;
- (BOOL)notificationWindow:(NCNotificationWindow *)arg1 dragStarted:(NSEvent *)arg2;
- (void)notificationWindowDismissTimeElapsed:(NCNotificationWindow *)arg1;
- (void)notificationWindowSwipeEnded:(NCNotificationWindow *)arg1 cancelled:(BOOL)arg2;
- (void)notificationWindowSwipeProgressed:(NCNotificationWindow *)arg1 progress:(double)arg2;
- (BOOL)notificationWindowSwipeStarted:(NCNotificationWindow *)arg1 rightToLeft:(BOOL)arg2 withEvent:(NSEvent *)arg3;
- (BOOL)notificationWindowCanSwipe:(NCNotificationWindow *)arg1 left:(BOOL)arg2;
@end

@protocol NCRoundedWindowContentDelegate <NSObject>

@optional
- (void)contentView:(NCRoundedWindowContentView *)arg1 velocity:(double)arg2 draggedCompleted:(BOOL)arg3;
- (void)contentView:(NCRoundedWindowContentView *)arg1 dragged:(NSEvent *)arg2;
- (BOOL)contentView:(NCRoundedWindowContentView *)arg1 dragStarted:(NSEvent *)arg2;
- (void)contentViewUpdateConstraints:(NCRoundedWindowContentView *)arg1;
- (void)contentViewLayedOut:(NCRoundedWindowContentView *)arg1;
- (BOOL)contentView:(NCRoundedWindowContentView *)arg1 scrolled:(NSEvent *)arg2;
- (void)contentViewCloseButtonClicked:(NCRoundedWindowContentView *)arg1;
- (void)contentView:(NCRoundedWindowContentView *)arg1 mouseEntered:(BOOL)arg2;
- (void)contentView:(NCRoundedWindowContentView *)arg1 mouseClicked:(long long)arg2;
@end

@protocol NCTableViewDelegate <NSTableViewDelegate>

@optional
- (BOOL)ncTableView:(NCTableView *)arg1 validateMenuItem:(NSMenuItem *)arg2;
- (BOOL)ncTableViewPasteHandled:(NCTableView *)arg1;
- (BOOL)ncTableViewCopyHandled:(NCTableView *)arg1;
- (BOOL)ncTableView:(NCTableView *)arg1 keyDown:(NSEvent *)arg2;
- (NSMenu *)ncTableView:(NCTableView *)arg1 contextualMenuForColumn:(long long)arg2 row:(long long)arg3;
@end

@protocol NCWindowLayoutDelegate <NSObject>
- (void)windowLayout:(NCWindowLayoutController *)arg1 showNotificationInCenter:(NCModel *)arg2;
@end

@protocol NSApplicationDelegate <NSObject>

@optional
- (void)applicationDidChangeOcclusionState:(NSNotification *)arg1;
- (void)applicationDidChangeScreenParameters:(NSNotification *)arg1;
- (void)applicationWillTerminate:(NSNotification *)arg1;
- (void)applicationDidUpdate:(NSNotification *)arg1;
- (void)applicationWillUpdate:(NSNotification *)arg1;
- (void)applicationDidResignActive:(NSNotification *)arg1;
- (void)applicationWillResignActive:(NSNotification *)arg1;
- (void)applicationDidBecomeActive:(NSNotification *)arg1;
- (void)applicationWillBecomeActive:(NSNotification *)arg1;
- (void)applicationDidUnhide:(NSNotification *)arg1;
- (void)applicationWillUnhide:(NSNotification *)arg1;
- (void)applicationDidHide:(NSNotification *)arg1;
- (void)applicationWillHide:(NSNotification *)arg1;
- (void)applicationDidFinishLaunching:(NSNotification *)arg1;
- (void)applicationWillFinishLaunching:(NSNotification *)arg1;
- (void)application:(NSApplication *)arg1 didDecodeRestorableState:(NSCoder *)arg2;
- (void)application:(NSApplication *)arg1 willEncodeRestorableState:(NSCoder *)arg2;
- (void)application:(NSApplication *)arg1 didReceiveRemoteNotification:(NSDictionary *)arg2;
- (void)application:(NSApplication *)arg1 didFailToRegisterForRemoteNotificationsWithError:(NSError *)arg2;
- (void)application:(NSApplication *)arg1 didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)arg2;
- (NSError *)application:(NSApplication *)arg1 willPresentError:(NSError *)arg2;
- (NSMenu *)applicationDockMenu:(NSApplication *)arg1;
- (BOOL)applicationShouldHandleReopen:(NSApplication *)arg1 hasVisibleWindows:(BOOL)arg2;
- (BOOL)applicationShouldTerminateAfterLastWindowClosed:(NSApplication *)arg1;
- (unsigned long long)application:(NSApplication *)arg1 printFiles:(NSArray *)arg2 withSettings:(NSDictionary *)arg3 showPrintPanels:(BOOL)arg4;
- (BOOL)application:(NSApplication *)arg1 printFile:(NSString *)arg2;
- (BOOL)application:(id)arg1 openFileWithoutUI:(NSString *)arg2;
- (BOOL)applicationOpenUntitledFile:(NSApplication *)arg1;
- (BOOL)applicationShouldOpenUntitledFile:(NSApplication *)arg1;
- (BOOL)application:(NSApplication *)arg1 openTempFile:(NSString *)arg2;
- (void)application:(NSApplication *)arg1 openFiles:(NSArray *)arg2;
- (BOOL)application:(NSApplication *)arg1 openFile:(NSString *)arg2;
- (unsigned long long)applicationShouldTerminate:(NSApplication *)arg1;
@end

@protocol NSControlTextEditingDelegate <NSObject>

@optional
- (NSArray *)control:(NSControl *)arg1 textView:(NSTextView *)arg2 completions:(NSArray *)arg3 forPartialWordRange:(struct _NSRange)arg4 indexOfSelectedItem:(long long *)arg5;
- (BOOL)control:(NSControl *)arg1 textView:(NSTextView *)arg2 doCommandBySelector:(SEL)arg3;
- (BOOL)control:(NSControl *)arg1 isValidObject:(id)arg2;
- (void)control:(NSControl *)arg1 didFailToValidatePartialString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 didFailToFormatString:(NSString *)arg2 errorDescription:(NSString *)arg3;
- (BOOL)control:(NSControl *)arg1 textShouldEndEditing:(NSText *)arg2;
- (BOOL)control:(NSControl *)arg1 textShouldBeginEditing:(NSText *)arg2;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
- (NSString *)description;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (struct _NSZone *)zone;
- (id)self;
- (Class)class;
- (Class)superclass;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;

@optional
- (NSString *)debugDescription;
@end

@protocol NSSharingServiceDelegate <NSObject>

@optional
- (NSWindow *)sharingService:(NSSharingService *)arg1 sourceWindowForShareItems:(NSArray *)arg2 sharingContentScope:(long long *)arg3;
- (NSImage *)sharingService:(NSSharingService *)arg1 transitionImageForShareItem:(id <NSPasteboardWriting>)arg2 contentRect:(struct CGRect *)arg3;
- (struct CGRect)sharingService:(NSSharingService *)arg1 sourceFrameOnScreenForShareItem:(id <NSPasteboardWriting>)arg2;
- (void)sharingService:(NSSharingService *)arg1 didShareItems:(NSArray *)arg2;
- (void)sharingService:(NSSharingService *)arg1 didFailToShareItems:(NSArray *)arg2 error:(NSError *)arg3;
- (void)sharingService:(NSSharingService *)arg1 willShareItems:(NSArray *)arg2;
@end

@protocol NSTableViewDataSource <NSObject>

@optional
- (NSArray *)tableView:(NSTableView *)arg1 namesOfPromisedFilesDroppedAtDestination:(NSURL *)arg2 forDraggedRowsWithIndexes:(NSIndexSet *)arg3;
- (BOOL)tableView:(NSTableView *)arg1 acceptDrop:(id <NSDraggingInfo>)arg2 row:(long long)arg3 dropOperation:(unsigned long long)arg4;
- (unsigned long long)tableView:(NSTableView *)arg1 validateDrop:(id <NSDraggingInfo>)arg2 proposedRow:(long long)arg3 proposedDropOperation:(unsigned long long)arg4;
- (BOOL)tableView:(NSTableView *)arg1 writeRowsWithIndexes:(NSIndexSet *)arg2 toPasteboard:(NSPasteboard *)arg3;
- (void)tableView:(NSTableView *)arg1 updateDraggingItemsForDrag:(id <NSDraggingInfo>)arg2;
- (void)tableView:(NSTableView *)arg1 draggingSession:(NSDraggingSession *)arg2 endedAtPoint:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (void)tableView:(NSTableView *)arg1 draggingSession:(NSDraggingSession *)arg2 willBeginAtPoint:(struct CGPoint)arg3 forRowIndexes:(NSIndexSet *)arg4;
- (id <NSPasteboardWriting>)tableView:(NSTableView *)arg1 pasteboardWriterForRow:(long long)arg2;
- (void)tableView:(NSTableView *)arg1 sortDescriptorsDidChange:(NSArray *)arg2;
- (void)tableView:(NSTableView *)arg1 setObjectValue:(id)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (id)tableView:(NSTableView *)arg1 objectValueForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(NSTableView *)arg1;
@end

@protocol NSTableViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)tableViewSelectionIsChanging:(NSNotification *)arg1;
- (void)tableViewColumnDidResize:(NSNotification *)arg1;
- (void)tableViewColumnDidMove:(NSNotification *)arg1;
- (void)tableViewSelectionDidChange:(NSNotification *)arg1;
- (BOOL)tableView:(NSTableView *)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (double)tableView:(NSTableView *)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (BOOL)tableView:(NSTableView *)arg1 isGroupRow:(long long)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldTypeSelectForEvent:(NSEvent *)arg2 withCurrentSearchString:(NSString *)arg3;
- (long long)tableView:(NSTableView *)arg1 nextTypeSelectMatchFromRow:(long long)arg2 toRow:(long long)arg3 forString:(NSString *)arg4;
- (NSString *)tableView:(NSTableView *)arg1 typeSelectStringForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (double)tableView:(NSTableView *)arg1 heightOfRow:(long long)arg2;
- (void)tableView:(NSTableView *)arg1 didDragTableColumn:(NSTableColumn *)arg2;
- (void)tableView:(NSTableView *)arg1 didClickTableColumn:(NSTableColumn *)arg2;
- (void)tableView:(NSTableView *)arg1 mouseDownInHeaderOfTableColumn:(NSTableColumn *)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldSelectTableColumn:(NSTableColumn *)arg2;
- (NSIndexSet *)tableView:(NSTableView *)arg1 selectionIndexesForProposedSelection:(NSIndexSet *)arg2;
- (BOOL)tableView:(NSTableView *)arg1 shouldSelectRow:(long long)arg2;
- (BOOL)selectionShouldChangeInTableView:(NSTableView *)arg1;
- (NSCell *)tableView:(NSTableView *)arg1 dataCellForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (BOOL)tableView:(NSTableView *)arg1 shouldTrackCell:(NSCell *)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (BOOL)tableView:(NSTableView *)arg1 shouldShowCellExpansionForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (NSString *)tableView:(NSTableView *)arg1 toolTipForCell:(NSCell *)arg2 rect:(struct CGRect *)arg3 tableColumn:(NSTableColumn *)arg4 row:(long long)arg5 mouseLocation:(struct CGPoint)arg6;
- (BOOL)tableView:(NSTableView *)arg1 shouldEditTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
- (void)tableView:(NSTableView *)arg1 willDisplayCell:(id)arg2 forTableColumn:(NSTableColumn *)arg3 row:(long long)arg4;
- (void)tableView:(NSTableView *)arg1 didRemoveRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (void)tableView:(NSTableView *)arg1 didAddRowView:(NSTableRowView *)arg2 forRow:(long long)arg3;
- (NSTableRowView *)tableView:(NSTableView *)arg1 rowViewForRow:(long long)arg2;
- (NSView *)tableView:(NSTableView *)arg1 viewForTableColumn:(NSTableColumn *)arg2 row:(long long)arg3;
@end

@protocol NSTextDelegate <NSObject>

@optional
- (void)textDidChange:(NSNotification *)arg1;
- (void)textDidEndEditing:(NSNotification *)arg1;
- (void)textDidBeginEditing:(NSNotification *)arg1;
- (BOOL)textShouldEndEditing:(NSText *)arg1;
- (BOOL)textShouldBeginEditing:(NSText *)arg1;
@end

@protocol NSTextViewDelegate <NSTextDelegate>

@optional
- (NSUndoManager *)undoManagerForTextView:(NSTextView *)arg1;
- (void)textView:(NSTextView *)arg1 draggedCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3 event:(NSEvent *)arg4;
- (void)textView:(NSTextView *)arg1 doubleClickedOnCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3;
- (void)textView:(NSTextView *)arg1 clickedOnCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3;
- (BOOL)textView:(NSTextView *)arg1 clickedOnLink:(id)arg2;
- (NSSharingServicePicker *)textView:(NSTextView *)arg1 willShowSharingServicePicker:(NSSharingServicePicker *)arg2 forItems:(NSArray *)arg3;
- (NSURL *)textView:(NSTextView *)arg1 URLForContentsOfTextAttachment:(NSTextAttachment *)arg2 atIndex:(unsigned long long)arg3;
- (NSArray *)textView:(NSTextView *)arg1 didCheckTextInRange:(struct _NSRange)arg2 types:(unsigned long long)arg3 options:(NSDictionary *)arg4 results:(NSArray *)arg5 orthography:(NSOrthography *)arg6 wordCount:(long long)arg7;
- (NSDictionary *)textView:(NSTextView *)arg1 willCheckTextInRange:(struct _NSRange)arg2 options:(NSDictionary *)arg3 types:(unsigned long long *)arg4;
- (NSMenu *)textView:(NSTextView *)arg1 menu:(NSMenu *)arg2 forEvent:(NSEvent *)arg3 atIndex:(unsigned long long)arg4;
- (long long)textView:(NSTextView *)arg1 shouldSetSpellingState:(long long)arg2 range:(struct _NSRange)arg3;
- (BOOL)textView:(NSTextView *)arg1 doCommandBySelector:(SEL)arg2;
- (BOOL)textView:(NSTextView *)arg1 shouldChangeTextInRange:(struct _NSRange)arg2 replacementString:(NSString *)arg3;
- (NSArray *)textView:(NSTextView *)arg1 completions:(NSArray *)arg2 forPartialWordRange:(struct _NSRange)arg3 indexOfSelectedItem:(long long *)arg4;
- (NSString *)textView:(NSTextView *)arg1 willDisplayToolTip:(NSString *)arg2 forCharacterAtIndex:(unsigned long long)arg3;
- (void)textViewDidChangeTypingAttributes:(NSNotification *)arg1;
- (void)textViewDidChangeSelection:(NSNotification *)arg1;
- (NSDictionary *)textView:(NSTextView *)arg1 shouldChangeTypingAttributes:(NSDictionary *)arg2 toAttributes:(NSDictionary *)arg3;
- (BOOL)textView:(NSTextView *)arg1 shouldChangeTextInRanges:(NSArray *)arg2 replacementStrings:(NSArray *)arg3;
- (NSArray *)textView:(NSTextView *)arg1 willChangeSelectionFromCharacterRanges:(NSArray *)arg2 toCharacterRanges:(NSArray *)arg3;
- (struct _NSRange)textView:(NSTextView *)arg1 willChangeSelectionFromCharacterRange:(struct _NSRange)arg2 toCharacterRange:(struct _NSRange)arg3;
- (BOOL)textView:(NSTextView *)arg1 writeCell:(id <NSTextAttachmentCell>)arg2 atIndex:(unsigned long long)arg3 toPasteboard:(NSPasteboard *)arg4 type:(NSString *)arg5;
- (NSArray *)textView:(NSTextView *)arg1 writablePasteboardTypesForCell:(id <NSTextAttachmentCell>)arg2 atIndex:(unsigned long long)arg3;
- (void)textView:(NSTextView *)arg1 draggedCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3 event:(NSEvent *)arg4 atIndex:(unsigned long long)arg5;
- (void)textView:(NSTextView *)arg1 doubleClickedOnCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3 atIndex:(unsigned long long)arg4;
- (void)textView:(NSTextView *)arg1 clickedOnCell:(id <NSTextAttachmentCell>)arg2 inRect:(struct CGRect)arg3 atIndex:(unsigned long long)arg4;
- (BOOL)textView:(NSTextView *)arg1 clickedOnLink:(id)arg2 atIndex:(unsigned long long)arg3;
@end

@protocol NSWindowDelegate <NSObject>

@optional
- (void)windowDidChangeOcclusionState:(NSNotification *)arg1;
- (void)windowDidExitVersionBrowser:(NSNotification *)arg1;
- (void)windowWillExitVersionBrowser:(NSNotification *)arg1;
- (void)windowDidEnterVersionBrowser:(NSNotification *)arg1;
- (void)windowWillEnterVersionBrowser:(NSNotification *)arg1;
- (void)windowDidExitFullScreen:(NSNotification *)arg1;
- (void)windowWillExitFullScreen:(NSNotification *)arg1;
- (void)windowDidEnterFullScreen:(NSNotification *)arg1;
- (void)windowWillEnterFullScreen:(NSNotification *)arg1;
- (void)windowDidEndLiveResize:(NSNotification *)arg1;
- (void)windowWillStartLiveResize:(NSNotification *)arg1;
- (void)windowDidEndSheet:(NSNotification *)arg1;
- (void)windowWillBeginSheet:(NSNotification *)arg1;
- (void)windowDidChangeBackingProperties:(NSNotification *)arg1;
- (void)windowDidChangeScreenProfile:(NSNotification *)arg1;
- (void)windowDidChangeScreen:(NSNotification *)arg1;
- (void)windowDidUpdate:(NSNotification *)arg1;
- (void)windowDidDeminiaturize:(NSNotification *)arg1;
- (void)windowDidMiniaturize:(NSNotification *)arg1;
- (void)windowWillMiniaturize:(NSNotification *)arg1;
- (void)windowWillClose:(NSNotification *)arg1;
- (void)windowDidResignMain:(NSNotification *)arg1;
- (void)windowDidBecomeMain:(NSNotification *)arg1;
- (void)windowDidResignKey:(NSNotification *)arg1;
- (void)windowDidBecomeKey:(NSNotification *)arg1;
- (void)windowDidMove:(NSNotification *)arg1;
- (void)windowWillMove:(NSNotification *)arg1;
- (void)windowDidExpose:(NSNotification *)arg1;
- (void)windowDidResize:(NSNotification *)arg1;
- (void)window:(NSWindow *)arg1 didDecodeRestorableState:(NSCoder *)arg2;
- (void)window:(NSWindow *)arg1 willEncodeRestorableState:(NSCoder *)arg2;
- (struct CGSize)window:(NSWindow *)arg1 willResizeForVersionBrowserWithMaxPreferredSize:(struct CGSize)arg2 maxAllowedSize:(struct CGSize)arg3;
- (void)windowDidFailToExitFullScreen:(NSWindow *)arg1;
- (void)window:(NSWindow *)arg1 startCustomAnimationToEnterFullScreenOnScreen:(NSScreen *)arg2 withDuration:(double)arg3;
- (NSArray *)customWindowsToEnterFullScreenForWindow:(NSWindow *)arg1 onScreen:(NSScreen *)arg2;
- (void)window:(NSWindow *)arg1 startCustomAnimationToExitFullScreenWithDuration:(double)arg2;
- (NSArray *)customWindowsToExitFullScreenForWindow:(NSWindow *)arg1;
- (void)windowDidFailToEnterFullScreen:(NSWindow *)arg1;
- (void)window:(NSWindow *)arg1 startCustomAnimationToEnterFullScreenWithDuration:(double)arg2;
- (NSArray *)customWindowsToEnterFullScreenForWindow:(NSWindow *)arg1;
- (unsigned long long)window:(NSWindow *)arg1 willUseFullScreenPresentationOptions:(unsigned long long)arg2;
- (struct CGSize)window:(NSWindow *)arg1 willUseFullScreenContentSize:(struct CGSize)arg2;
- (BOOL)window:(NSWindow *)arg1 shouldDragDocumentWithEvent:(NSEvent *)arg2 from:(struct CGPoint)arg3 withPasteboard:(NSPasteboard *)arg4;
- (BOOL)window:(NSWindow *)arg1 shouldPopUpDocumentPathMenu:(NSMenu *)arg2;
- (struct CGRect)window:(NSWindow *)arg1 willPositionSheet:(NSWindow *)arg2 usingRect:(struct CGRect)arg3;
- (NSUndoManager *)windowWillReturnUndoManager:(NSWindow *)arg1;
- (BOOL)windowShouldZoom:(NSWindow *)arg1 toFrame:(struct CGRect)arg2;
- (struct CGRect)windowWillUseStandardFrame:(NSWindow *)arg1 defaultFrame:(struct CGRect)arg2;
- (struct CGSize)windowWillResize:(NSWindow *)arg1 toSize:(struct CGSize)arg2;
- (id)windowWillReturnFieldEditor:(NSWindow *)arg1 toObject:(id)arg2;
- (BOOL)windowShouldClose:(id)arg1;
@end

@protocol QLPreviewItem <NSObject>
@property(readonly) NSURL *previewItemURL;

@optional
@property(readonly) id previewItemDisplayState;
@property(readonly) NSString *previewItemTitle;
@end

@protocol _NCDNDScheduleDelegate <NSObject>
- (void)scheduleTimerDidFire:(_NCDNDSchedule *)arg1;
@end

@interface NCAppInfo : NSObject
{
    NSString *_name;
    NSImage *_image;
    NSString *_bundleIdentifier;
    int _type;
    BOOL _found;
    NSArray *_notifications;
    NSMutableArray *_unseenNotifications;
    unsigned long long _notificationsToShow;
    BOOL _showInNotificationCenter;
    BOOL _playSounds;
    BOOL _badgeIcons;
    BOOL _warnedAboutInvalidIdentity;
    BOOL _appDataLoadedStatically;
    BOOL _updatingNameImage;
    unsigned long long _alertStyle;
    NSObject<OS_dispatch_source> *_delivered_timer;
    CDUnknownBlockType _delivered_block;
    double _sound_last_play_time;
    double _lastestNotificationTime;
    NSMutableDictionary *_soundDictionary;
    NSString *_lastKnownPath;
    BOOL _needsToFetchData;
    BOOL _hiddenFromLockscreen;
    BOOL _contentHidden;
    BOOL _contentHiddenFromLockscreen;
    id <NCAppInfoDelegate> _delegate;
}

+ (id)keyPathsForValuesAffectingPreferenceDictionary;
@property BOOL contentHiddenFromLockscreen; // @synthesize contentHiddenFromLockscreen=_contentHiddenFromLockscreen;
@property BOOL contentHidden; // @synthesize contentHidden=_contentHidden;
@property BOOL hiddenFromLockscreen; // @synthesize hiddenFromLockscreen=_hiddenFromLockscreen;
@property BOOL needsToFetchData; // @synthesize needsToFetchData=_needsToFetchData;
@property(readonly) int type; // @synthesize type=_type;
@property(readonly) BOOL found; // @synthesize found=_found;
@property double lastestNotificationTime; // @synthesize lastestNotificationTime=_lastestNotificationTime;
@property unsigned long long alertStyle; // @synthesize alertStyle=_alertStyle;
@property BOOL playSounds; // @synthesize playSounds=_playSounds;
@property BOOL badgeIcons; // @synthesize badgeIcons=_badgeIcons;
@property BOOL showInNotificationCenter; // @synthesize showInNotificationCenter=_showInNotificationCenter;
@property unsigned long long notificationsToShow; // @synthesize notificationsToShow=_notificationsToShow;
@property(retain, nonatomic) NSArray *notifications; // @synthesize notifications=_notifications;
@property(readonly) NSImage *image; // @synthesize image=_image;
@property(readonly) NSString *bundleIdentifier; // @synthesize bundleIdentifier=_bundleIdentifier;
@property(readonly) NSString *name; // @synthesize name=_name;
@property __weak id <NCAppInfoDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain) NSString *lastKnownPath; // @synthesize lastKnownPath=_lastKnownPath;
- (void).cxx_destruct;
- (void)messageTraceLogPreferences;
- (void)clearUnreadNotificationMatching:(id)arg1;
- (void)clearUnreadNotifications;
- (void)setDeliveredActionBlock:(CDUnknownBlockType)arg1;
- (void)playSound:(id)arg1;
- (void)_playSoundWithBlock:(CDUnknownBlockType)arg1;
- (void)lookupInfoInBackgroundOnQueue:(id)arg1 fallbackPath:(id)arg2;
- (void)lookupInfoInBackgroundOnQueue:(id)arg1;
@property(copy) NSDictionary *preferenceDictionary;
@property(readonly) BOOL clearable;
@property(readonly) BOOL hasUnreadNotifications;
@property(readonly, nonatomic) NSString *unprefixedIdentifier;
@property(readonly) BOOL isWebApp;
@property(readonly) BOOL isSystemApp;
- (id)description;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)initSystemAppWithIdentifier:(id)arg1;
- (id)initWithBundleIdentifier:(id)arg1 lastKnownPath:(id)arg2 type:(int)arg3 name:(id)arg4 image:(id)arg5;
- (id)initWithBundleIdentifier:(id)arg1 lastKnownPath:(id)arg2 type:(int)arg3 loadInfoOnQueue:(id)arg4;

@end

@interface PeriodicMessageTrace : NSObject
{
    NSMutableArray *_blocks;
    NSObject<OS_dispatch_source> *_timer;
}

- (void).cxx_destruct;
- (void)addBlock:(CDUnknownBlockType)arg1;
- (id)initWithDomain:(id)arg1 preference:(id)arg2;

@end

@interface NCApplicationHeaderGroupView : NSTableRowView
{
    CALayer *_headerShadelayer;
    CALayer *_floatinglayer;
    double _tableHeight;
    id <NCAppHeaderGroupViewDelegate> _delegate;
}

@property id <NCAppHeaderGroupViewDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (BOOL)isOpaque;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)updateLayer;
- (BOOL)layer:(id)arg1 shouldInheritContentsScale:(double)arg2 fromWindow:(id)arg3;
- (void)createFloatingLayerForFrame:(struct CGRect)arg1;
- (BOOL)wantsUpdateLayer;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface NCBannerView : NSView
{
    NCBannerViewController *_owner;
}

@property __weak NCBannerViewController *owner; // @synthesize owner=_owner;
- (void).cxx_destruct;
- (void)updateConstraints;

@end

@interface NCBannerViewController : NCBaseBannerViewController
{
    NSString *_header;
    NSString *_subtitle;
    NSString *_body;
    double _originalSubtitleHeight;
    double _originalBodyHeight;
    double _originalBodyWidth;
    double _originalMutliWidth;
    double _originalStatusWidth;
    double _originalMiniImageWidth;
    double _originalDistanceToTitleWidth;
    double _originalContentImageHeight;
    double _originalContentImageWidth;
    double _originalContentImageToEdge;
    double _originalTitleToStatus;
    double _bodyMarginWidth;
    NSDate *_subtitleLiveDate;
    NCRelativeDateTransformer *_dateTransformer;
    NSObject<OS_dispatch_source> *_date_update_source;
    NSTextField *_headerTF;
    NSTextField *_subtitleTF;
    NSTextField *_bodyTF;
    NSLayoutConstraint *_subtitleHeightConstraint;
    NSLayoutConstraint *_bodyHeightConstraint;
    NSLayoutConstraint *_titleToStatusConstraint;
    NSLayoutConstraint *_bodyLeftConstraint;
    NSLayoutConstraint *_bodyRightConstraint;
    NSLayoutConstraint *_topImageConstraint;
    NSLayoutConstraint *_bottomImageConstraint;
    NSLayoutConstraint *_statusImageWidthConstraint;
    NSLayoutConstraint *_miniImageWidthConstraint;
    NSLayoutConstraint *_miniImageDistanceToTitleConstraint;
    NSLayoutConstraint *_contentImageWidthConstraint;
    NSLayoutConstraint *_contentImageHeightConstraint;
    NSLayoutConstraint *_contentImageToEdgeConstraint;
    NSLayoutConstraint *_debugConstraint;
    NSImageView *_statusView;
    NCImageFramedView *_contentImage;
    NSImageView *_miniImageView;
    NSView *_contentView;
    NSView *_alertView;
    NSView *_inputView;
}

@property NSView *inputView; // @synthesize inputView=_inputView;
@property(retain) NSView *alertView; // @synthesize alertView=_alertView;
@property(retain) NSView *contentView; // @synthesize contentView=_contentView;
@property NSImageView *miniImageView; // @synthesize miniImageView=_miniImageView;
@property NCImageFramedView *contentImage; // @synthesize contentImage=_contentImage;
@property NSImageView *statusView; // @synthesize statusView=_statusView;
@property NSLayoutConstraint *debugConstraint; // @synthesize debugConstraint=_debugConstraint;
@property NSLayoutConstraint *contentImageToEdgeConstraint; // @synthesize contentImageToEdgeConstraint=_contentImageToEdgeConstraint;
@property NSLayoutConstraint *contentImageHeightConstraint; // @synthesize contentImageHeightConstraint=_contentImageHeightConstraint;
@property NSLayoutConstraint *contentImageWidthConstraint; // @synthesize contentImageWidthConstraint=_contentImageWidthConstraint;
@property NSLayoutConstraint *miniImageDistanceToTitleConstraint; // @synthesize miniImageDistanceToTitleConstraint=_miniImageDistanceToTitleConstraint;
@property NSLayoutConstraint *miniImageWidthConstraint; // @synthesize miniImageWidthConstraint=_miniImageWidthConstraint;
@property NSLayoutConstraint *statusImageWidthConstraint; // @synthesize statusImageWidthConstraint=_statusImageWidthConstraint;
@property NSLayoutConstraint *bottomImageConstraint; // @synthesize bottomImageConstraint=_bottomImageConstraint;
@property NSLayoutConstraint *topImageConstraint; // @synthesize topImageConstraint=_topImageConstraint;
@property NSLayoutConstraint *bodyRightConstraint; // @synthesize bodyRightConstraint=_bodyRightConstraint;
@property NSLayoutConstraint *bodyLeftConstraint; // @synthesize bodyLeftConstraint=_bodyLeftConstraint;
@property NSLayoutConstraint *titleToStatusConstraint; // @synthesize titleToStatusConstraint=_titleToStatusConstraint;
@property NSLayoutConstraint *bodyHeightConstraint; // @synthesize bodyHeightConstraint=_bodyHeightConstraint;
@property NSLayoutConstraint *subtitleHeightConstraint; // @synthesize subtitleHeightConstraint=_subtitleHeightConstraint;
@property NSTextField *bodyTF; // @synthesize bodyTF=_bodyTF;
@property NSTextField *subtitleTF; // @synthesize subtitleTF=_subtitleTF;
@property NSTextField *headerTF; // @synthesize headerTF=_headerTF;
@property(retain, nonatomic) NSString *subtitle; // @synthesize subtitle=_subtitle;
@property(retain, nonatomic) NSString *body; // @synthesize body=_body;
@property(retain, nonatomic) NSString *header; // @synthesize header=_header;
- (void).cxx_destruct;
- (void)_scheduleDateUpdate;
- (void)_performDateUpdate;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)updateLiveDate;
- (void)addTalkingAlertProperties:(id)arg1;
- (BOOL)updateBodyWidthConstraint;
- (void)updateConstraints;
- (void)updateViewsFromModel;
- (void)setLockscreenMode:(BOOL)arg1;
- (void)setValue:(id)arg1;
- (void)loadView;
@property(readonly) NCBannerView *bannerView;
- (id)nibName;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)init;

@end

@interface NCNotificationCenterController : NSObject <NSApplicationDelegate, NCWindowLayoutDelegate, NCNotificationCenterDelegate, NCEventTrapWindowDelegate, NCAlertProviderDelegate, NCDebugWindowDelegate>
{
    NSStatusItem *_statusItem;
    NCNotificationCenter *_center;
    NCEventTrapWindow *_eventShieldWindow;
    NSMutableArray *_alertProviders;
    BOOL _newMessages;
    BOOL _isAnimating;
    BOOL _mouseDownWhenOpen;
    BOOL _bannersAndAlertsDisabled;
    BOOL _ncDisabled;
    BOOL _processUnbackgrounded;
    BOOL _DEBUG_POPOUT_WINDOW;
    BOOL _DEBUG_SLIDE_WINDOW;
    BOOL _DEBUG_LOCK_SCREEN;
    BOOL _DEBUG_SHOW_SETTINGS_WINDOW;
    double _statusMouseDownTime;
    NCNotificationTableController *_notificationTableController;
    NCWindowLayoutController *_notificationWindowController;
    NCStatusButtonCell *_statusButtonCell;
    unsigned int _layoutDisplay;
    unsigned long long _notificationsSpace;
    struct CGRect _screenFrame;
    struct CGRect _visibleFrame;
    NCDNDController *_dndController;
    NSObject<OS_dispatch_source> *_reconfig_timer;
    NSObject<OS_dispatch_source> *_state_updater_timer;
    _Bool _displaySleeping;
    _Bool _lockuiShowing;
    _Bool _screenLocked;
    _Bool _shieldUp;
    _Bool _settingDND;
    BOOL _shown;
    BOOL _showingShareKitWindow;
    NSMenu *_optionsMenu;
}

@property BOOL showingShareKitWindow; // @synthesize showingShareKitWindow=_showingShareKitWindow;
@property(readonly) NCDNDController *dndController; // @synthesize dndController=_dndController;
@property(readonly) NCNotificationTableController *notificationTableController; // @synthesize notificationTableController=_notificationTableController;
@property(readonly) NCWindowLayoutController *notificationWindowController; // @synthesize notificationWindowController=_notificationWindowController;
@property(readonly) BOOL shown; // @synthesize shown=_shown;
@property NSMenu *optionsMenu; // @synthesize optionsMenu=_optionsMenu;
- (void).cxx_destruct;
- (void)screenParametersChanged;
- (void)screenParemetersChangedProcessNow;
- (BOOL)eventWindow:(id)arg1 keyDownWithEvent:(id)arg2;
- (void)debugWindowScreenlockModeChanged:(id)arg1;
- (void)debugWindowDoNotDisturbModeChanged:(id)arg1;
- (void)windowLayout:(id)arg1 showNotificationInCenter:(id)arg2;
- (void)notificationCenter:(id)arg1 progressRemoved:(id)arg2;
- (void)notificationCenter:(id)arg1 progressAdded:(id)arg2;
- (void)notificationCenter:(id)arg1 alertChanged:(id)arg2 forApplication:(id)arg3;
- (void)notificationCenter:(id)arg1 restoreSnoozedAlert:(id)arg2 forApplication:(id)arg3;
- (void)notificationCenter:(id)arg1 clearBannersForApplication:(id)arg2;
- (void)notificationCenter:(id)arg1 removeDisplayedNotification:(id)arg2 forApplication:(id)arg3;
- (void)notificationCenter:(id)arg1 applicationRemoved:(id)arg2;
- (void)notificationCenter:(id)arg1 restoreAlerts:(id)arg2 forApplication:(id)arg3;
- (void)notificationCenter:(id)arg1 presentNotification:(id)arg2 forApplication:(id)arg3 withUnpresentedCount:(unsigned long long)arg4;
- (void)notificationCenter:(id)arg1 applicationUpdated:(id)arg2;
- (void)notificationCenter:(id)arg1 hasUnreadNotifications:(BOOL)arg2;
- (void)notificationCenterDataReloaded:(id)arg1;
- (void)notificationCenterConnectionError:(id)arg1;
- (void)notificationCenter:(id)arg1 applicationOrderChanged:(id)arg2;
- (void)closeCompletedFluid:(BOOL)arg1;
- (void)closeStarted:(BOOL)arg1 fluid:(BOOL)arg2;
- (void)openCompletedFluid:(BOOL)arg1;
- (void)openStarted:(BOOL)arg1 fluid:(BOOL)arg2 fullscreen:(BOOL)arg3 display:(unsigned int)arg4;
- (void)_debugDump:(id)arg1;
- (void)_systemEventThatShouldCauseNotificationCenterToClose:(id)arg1;
- (void)_showDNDButton:(id)arg1;
- (void)_displaySleep;
- (void)_displayLit;
- (void)_registerForLockscreenNotifications;
- (void)_updateStateNow;
- (void)_updateState;
- (void)_updateDisplayState;
- (void)_createEventShieldWindow;
- (void)statusItemClicked:(id)arg1;
- (void)showPreferences:(id)arg1;
- (void)quit:(id)arg1;
- (void)alertProvider:(id)arg1 removeAlert:(id)arg2;
- (void)alertProvider:(id)arg1 showAlert:(id)arg2 animation:(int)arg3 restore:(_Bool)arg4;
- (void)registerAlertConnection:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_updateDoNotDisurbViews;
@property(readonly) BOOL doNotDisturbActive;
- (void)requestClose;
- (void)requestOpenWithReason:(const char *)arg1 display:(unsigned int)arg2;
- (void)requestOpenWithReason:(const char *)arg1;
- (void)applicationDidFinishLaunching:(id)arg1;

@end

@interface NCNotificationRowView : NSTableRowView
{
}

- (BOOL)isOpaque;

@end

@interface NCNotificationTableCellView : NCTableCellView <NCNotificationTableCellHeight>
{
    NCListViewController *_listViewController;
    NSLayoutConstraint *_widthConstraint;
    CALayer *_dividerLine;
    BOOL _setup;
    BOOL _forProgress;
    float _height;
}

@property(readonly) BOOL forProgress; // @synthesize forProgress=_forProgress;
- (void).cxx_destruct;
- (void)updateDate;
@property(readonly) float height; // @synthesize height=_height;
- (void)setObjectValue:(id)arg1;
- (void)_tableWidthChanged:(id)arg1;
- (void)viewDidMoveToSuperview;
- (void)viewWillMoveToSuperview:(id)arg1;
- (void)updateLayer;
- (void)viewDidChangeBackingProperties;
- (BOOL)wantsUpdateLayer;
- (void)_commonSetup;
- (void)setupForNotifications;
- (void)setupForProgress;
- (void)dealloc;

@end

@interface _NCWindow : NSPanel
{
}

- (BOOL)inLiveResize;
- (BOOL)isOnActiveSpace;
- (BOOL)canBecomeKeyWindow;

@end

@interface NCNotificationTableController : NSObject <NCTableViewDelegate, NSTableViewDataSource, NCNotificationCenterDelegate, NCAppHeaderGroupViewDelegate>
{
    NSMutableArray *_widgets;
    NSMutableDictionary *_widgetsByID;
    NSMutableArray *_tableCache;
    NSView *_sizingParentView;
    NCNotificationTableCellView *_sizingNotificationRowView;
    NCNotificationTableCellView *_sizingProgressRowView;
    BOOL _quicklooksEnabled;
    QLPreviewBubble *_previewBubble;
    NSTrackingArea *_previewTrackingArea;
    NSObject<OS_dispatch_source> *_date_update_timer;
    NCDNDWidget *_dndWidget;
    double _tableWidth;
    double _centerWidth;
    BOOL _tableNeedsReload;
    BOOL _tableHiding;
    int _timeToken;
    id <NCNotificationTableDataSource> _dataSource;
    _Bool _showDNDonNextOpen;
    NSPanel *_window;
    NCTexturedView *_texturedBackground;
    NCTableView *_tableView;
    NSScrollView *_tableScrollView;
    NSTextField *_noMessagesTF;
    NCStatusButtonCell *_statusButton;
    NSView *_statusView;
    NCShadowTextFieldCell *_fullScreenTextCell;
    NSView *_centeringContainer;
    NSLayoutConstraint *_tableTopConstraint;
    NSLayoutConstraint *_bottomConstraint;
    NSLayoutConstraint *_centerLeftConstraint;
    NSLayoutConstraint *_centeringWidthConstraint;
    NSButton *_prefsButton;
}

@property _Bool showDNDonNextOpen; // @synthesize showDNDonNextOpen=_showDNDonNextOpen;
@property NSButton *prefsButton; // @synthesize prefsButton=_prefsButton;
@property NSLayoutConstraint *centeringWidthConstraint; // @synthesize centeringWidthConstraint=_centeringWidthConstraint;
@property NSLayoutConstraint *centerLeftConstraint; // @synthesize centerLeftConstraint=_centerLeftConstraint;
@property NSLayoutConstraint *bottomConstraint; // @synthesize bottomConstraint=_bottomConstraint;
@property(readonly, nonatomic) NSArray *widgets; // @synthesize widgets=_widgets;
@property(readonly, nonatomic) id <NCNotificationTableDataSource> dataSource; // @synthesize dataSource=_dataSource;
@property NSLayoutConstraint *_tableTopConstraint; // @synthesize _tableTopConstraint;
@property(readonly, nonatomic) NCDNDWidget *doNotDisturbWidget; // @synthesize doNotDisturbWidget=_dndWidget;
@property NSView *centeringContainer; // @synthesize centeringContainer=_centeringContainer;
@property NCShadowTextFieldCell *fullScreenTextCell; // @synthesize fullScreenTextCell=_fullScreenTextCell;
@property NSView *statusView; // @synthesize statusView=_statusView;
@property NCStatusButtonCell *statusButton; // @synthesize statusButton=_statusButton;
@property NSTextField *noMessagesTF; // @synthesize noMessagesTF=_noMessagesTF;
@property NSScrollView *tableScrollView; // @synthesize tableScrollView=_tableScrollView;
@property(readonly, nonatomic) double centerWidth; // @synthesize centerWidth=_centerWidth;
@property(readonly, nonatomic) double tableWidth; // @synthesize tableWidth=_tableWidth;
@property NCTableView *tableView; // @synthesize tableView=_tableView;
@property NCTexturedView *texturedBackground; // @synthesize texturedBackground=_texturedBackground;
@property(retain) NSPanel *window; // @synthesize window=_window;
- (void).cxx_destruct;
- (BOOL)ncTableView:(id)arg1 keyDown:(id)arg2;
- (BOOL)_tabSelectPreviousKeyView;
- (BOOL)_tabSelectNextKeyView;
- (BOOL)_rowHasKeyNavigatableControls:(long long)arg1;
- (id)ncTableView:(id)arg1 contextualMenuForColumn:(long long)arg2 row:(long long)arg3;
- (BOOL)tableView:(id)arg1 shouldSelectRow:(long long)arg2;
- (BOOL)tableView:(id)arg1 isGroupRow:(long long)arg2;
- (void)tableView:(id)arg1 didAddRowView:(id)arg2 forRow:(long long)arg3;
- (id)tableView:(id)arg1 rowViewForRow:(long long)arg2;
- (double)tableView:(id)arg1 heightOfRow:(long long)arg2;
- (id)tableView:(id)arg1 viewForTableColumn:(id)arg2 row:(long long)arg3;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)windowHeightAndTopOffset:(CDUnknownBlockType)arg1;
- (void)notificationCenter:(id)arg1 progressRemoved:(id)arg2;
- (void)notificationCenter:(id)arg1 progressAdded:(id)arg2;
- (void)notificationCenter:(id)arg1 hasUnreadNotifications:(BOOL)arg2;
- (void)notificationCenter:(id)arg1 alertChanged:(id)arg2 forApplication:(id)arg3;
- (void)notificationCenter:(id)arg1 restoreSnoozedAlert:(id)arg2 forApplication:(id)arg3;
- (void)notificationCenter:(id)arg1 clearBannersForApplication:(id)arg2;
- (void)notificationCenter:(id)arg1 removeDisplayedNotification:(id)arg2 forApplication:(id)arg3;
- (void)notificationCenter:(id)arg1 applicationRemoved:(id)arg2;
- (void)notificationCenter:(id)arg1 restoreAlerts:(id)arg2 forApplication:(id)arg3;
- (void)notificationCenter:(id)arg1 presentNotification:(id)arg2 forApplication:(id)arg3 withUnpresentedCount:(unsigned long long)arg4;
- (void)notificationCenter:(id)arg1 applicationUpdated:(id)arg2;
- (void)_reloadTableNow;
- (void)notificationCenter:(id)arg1 applicationOrderChanged:(id)arg2;
- (void)notificationCenterDataReloaded:(id)arg1;
- (void)notificationCenterConnectionError:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)debugDump:(id)arg1;
- (void)_widgetLoaded:(id)arg1;
- (void)_updateWidgetList;
- (void)_widgetHeightUpdated:(id)arg1;
- (void)tableScrolled:(id)arg1;
- (void)_tableResized:(id)arg1;
- (id)_makeNewProgressTableViewCellView;
- (id)_makeNewNotificationsTableViewCellView;
- (unsigned long long)_insertionRowForApplicationModel:(id)arg1;
- (id)_notificationsBeingDisplayedForApplication:(id)arg1 withRowOffset:(unsigned long long *)arg2;
- (id)_appModelForRow:(long long)arg1;
- (id)_objectForRow:(long long)arg1;
- (void)_updateDividerState:(BOOL)arg1;
- (void)_reloadTableCache;
- (void)_updateViewSize;
- (void)rowPressed:(id)arg1;
- (void)mouseMoved:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)_showQuicklookForRow:(long long)arg1;
- (void)setFailedToConnect;
- (void)hideQuicklookIfShowing;
- (void)tableWasHidden;
- (void)tableWillBeHidden;
- (void)tableWillBeShown;
- (void)updateTimesInTable;
- (void)scrollApplicationInView:(id)arg1;
- (void)layoutForDisplay:(unsigned int)arg1;
- (void)launchPreferences:(id)arg1;
- (void)doNotDistributModeChanged:(id)arg1;
- (void)statusButtonClicked:(id)arg1;
- (void)clearButtonClicked:(id)arg1;
@property(nonatomic) double bottomAdjustment;
- (void)dealloc;
- (id)initWithBottomConstraint:(double)arg1 spaces:(id)arg2 dataSource:(id)arg3 forDebug:(_Bool)arg4;

@end

@interface NCBannerAnimation : NSObject
{
    _Bool _invalid;
    _Bool _delayCompletion;
    int _type;
    int _transitionType;
    id <NCBannerAnimationDelegate> _delegate;
    NCNotificationWindow *_window;
    double _duration;
    CDUnknownBlockType _animate_to_block;
    CDUnknownBlockType _completed_block;
}

+ (void)setAnimationsDisabled:(BOOL)arg1;
+ (BOOL)animationsDisabled;
+ (void)runAnimations:(id)arg1 containerView:(id)arg2 withDuration:(double)arg3 animation:(CDUnknownBlockType)arg4 completed:(CDUnknownBlockType)arg5;
+ (double)defaultDuration;
+ (id)genericAnimationWithWindow:(id)arg1 delegate:(id)arg2;
+ (id)animationOutWithWindow:(id)arg1 delegate:(id)arg2 animation:(int)arg3;
+ (id)animationInWithWindow:(id)arg1 delegate:(id)arg2 animation:(int)arg3;
@property(readonly) _Bool delayCompletion; // @synthesize delayCompletion=_delayCompletion;
@property(readonly) _Bool invalid; // @synthesize invalid=_invalid;
@property(copy) CDUnknownBlockType completed_block; // @synthesize completed_block=_completed_block;
@property(copy) CDUnknownBlockType animate_to_block; // @synthesize animate_to_block=_animate_to_block;
@property(readonly) int transitionType; // @synthesize transitionType=_transitionType;
@property(readonly) double duration; // @synthesize duration=_duration;
@property(readonly) int type; // @synthesize type=_type;
@property(readonly) NCNotificationWindow *window; // @synthesize window=_window;
@property __weak id <NCBannerAnimationDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)completed;
- (void)start;
- (void)setup;
- (void)invalidate;
- (id)initWithWindow:(id)arg1 type:(int)arg2 delegate:(id)arg3 duration:(double)arg4 transitionType:(int)arg5;

@end

@interface NCBannerAnimationFadeIn : NCBannerAnimation
{
}

- (void)start;
- (void)setup;

@end

@interface NCBannerAnimationVerticalIn : NCBannerAnimation
{
}

+ (double)defaultDuration;
- (_Bool)delayCompletion;
- (void)setup;

@end

@interface NCBannerAnimationFadeOut : NCBannerAnimation
{
}

- (void)completed;
- (void)start;

@end

@interface NCBannerAnimationHorizontalOut : NCBannerAnimation
{
}

+ (double)defaultDuration;
- (void)start;

@end

@interface NCBannerAnimationVerticalOut : NCBannerAnimation
{
}

+ (double)defaultDuration;
- (void)completed;
- (void)start;
- (void)setup;

@end

@interface NCBannerAnimationPoofOut : NCBannerAnimation
{
}

+ (double)defaultDuration;
- (void)start;
- (void)setup;

@end

@interface NCBannerAnimationMove : NCBannerAnimation
{
}

@end

@interface NCBannerAnimationNone : NCBannerAnimation
{
}

+ (double)defaultDuration;

@end

@interface NCShadowTextFieldCell : NSTextFieldCell
{
    BOOL _drawsShadow;
    NSShadow *_shadow;
}

@property(readonly, nonatomic) NSShadow *shadow; // @synthesize shadow=_shadow;
@property(nonatomic) BOOL drawsShadow; // @synthesize drawsShadow=_drawsShadow;
- (void).cxx_destruct;
- (void)layoutLayerWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (unsigned long long)fontDilationStyle;
- (id)_textAttributes;
- (void)awakeFromNib;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface NCNotificationCenter : NSObject <NCAppInfoDelegate, NCNotificationTableDataSource>
{
    NSMutableDictionary *_applicationForBundleIdentifier;
    NSMutableDictionary *_widgetsForIdentifier;
    NSMutableSet *_hiddenWidgets;
    NSArray *_applicationOrder;
    NSArray *_byTimeApplicationOrder;
    NSUserNotification *_lastUnpresentedBanner;
    NSString *_unpresentedBannerAppId;
    NSObject<OS_dispatch_queue> *_app_loading_queue;
    unsigned long long _updateCounter;
    NSMutableArray *_watchingProgress;
    BOOL _launchServicesNotSeeded;
    BOOL _sortApplicationsByTime;
    BOOL _settingUp;
    BOOL _hasUnreadNotifications;
    BOOL _needsAuthentication;
    BOOL _serverConnectionFailure;
    _Bool _waitingForInitialConnection;
    NSObject<OS_xpc_object> *_connection;
    NSObject<OS_dispatch_queue> *_connection_queue;
    id <NCNotificationCenterDelegate> _delegate;
}

@property(readonly, nonatomic) NSArray *progressObjects; // @synthesize progressObjects=_watchingProgress;
@property(readonly, nonatomic) BOOL hasUnreadNotifications; // @synthesize hasUnreadNotifications=_hasUnreadNotifications;
@property __weak id <NCNotificationCenterDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_receiveApplicationList:(id)arg1;
- (void)_notificationAlertChanged:(id)arg1;
- (void)_applicationAlertShouldBeShownAfterSnooze:(id)arg1;
- (void)_applicationRestoredAlerts:(id)arg1;
- (void)_applicationClearBanners:(id)arg1;
- (void)_applicationDisplayedNotificationShouldBeRemoved:(id)arg1;
- (void)_applicationPreferencesChanged:(id)arg1;
- (void)_applicationUpdated:(id)arg1;
- (void)_applicationRemoved:(id)arg1;
- (void)_applicationOrderChanged:(id)arg1;
- (void)_notificationPreferencesChanged:(id)arg1;
- (void)_notificationDeliveredUpdated:(id)arg1;
- (void)_notificationPresentedMessage:(id)arg1;
- (void)_displayDelayedBannerForApp:(id)arg1;
- (id)_serverConnection;
- (void)_got_server_keep_alive:(id)arg1;
- (void)_send_connection_authentication;
- (void)appUnreadNotificationsChanged:(id)arg1;
- (void)app:(id)arg1 foundAtLocation:(id)arg2;
- (void)notifyDoNotDisturbChange:(_Bool)arg1;
- (void)sendDebugArchiveRequest:(id)arg1;
- (void)registerWidgets:(id)arg1;
- (void)clearUnreadNotifications;
- (id)applicationForIdentifier:(id)arg1;
- (id)_applicationForIdentifier:(id)arg1 lastKnownPath:(id)arg2 type:(int)arg3 createIfNecessary:(BOOL)arg4;
- (void)snoozeAlert:(id)arg1 forInterval:(double)arg2 forApplication:(id)arg3;
- (void)dismissAlert:(id)arg1 forApplication:(id)arg2;
- (void)performNotificationReply:(id)arg1 forApplication:(id)arg2;
- (void)viewNotification:(id)arg1 forApplication:(id)arg2;
- (void)performNotificationAction:(id)arg1 forApplication:(id)arg2;
- (void)_sendNotification:(id)arg1 action:(long long)arg2 forApplication:(id)arg3;
- (void)sentUpdatedApplicationPreferences:(id)arg1;
- (BOOL)clearAvailableForApplication:(id)arg1;
- (void)updateResponseStateForNotification:(id)arg1 responseState:(unsigned long long)arg2 inApplication:(id)arg3;
- (void)clearNotificationsForApplication:(id)arg1;
@property(readonly, nonatomic) NSArray *applicationOrder; // @synthesize applicationOrder=_applicationOrder;
- (void)dealloc;
- (id)init;

@end

@interface NCRelativeDateTransformer : NSValueTransformer
{
    NSBundle *bundleForLocalization;
    BOOL _longFormat;
}

+ (Class)transformedValueClass;
@property(readonly) NSBundle *bundleForLocalization; // @synthesize bundleForLocalization;
- (void).cxx_destruct;
- (id)_transformedValue:(id)arg1 allDay:(BOOL)arg2 duration:(id)arg3 isRelative:(_Bool *)arg4;
- (id)transformedValue:(id)arg1;
- (id)localizedString:(id)arg1;
- (id)snoozeStringForInterval:(double)arg1 before:(_Bool)arg2;
- (id)stringForDate:(id)arg1 allDay:(BOOL)arg2;
- (id)stringForDate:(id)arg1 allDay:(BOOL)arg2 duration:(id)arg3 isRelative:(_Bool *)arg4;
- (id)initWithLocalizerBundle:(id)arg1 longFormat:(BOOL)arg2;

@end

@interface NCTableView : NSTableView
{
    BOOL _animatorDisabled;
    _Bool _resetSelectionOnNextResign;
    double _extraSpace;
}

@property _Bool resetSelectionOnNextResign; // @synthesize resetSelectionOnNextResign=_resetSelectionOnNextResign;
@property double extraSpace; // @synthesize extraSpace=_extraSpace;
- (struct CGSize)_minimumFrameSize;
- (void)applyPermutationsFromArray:(id)arg1 toArray:(id)arg2 insertAnimation:(unsigned long long)arg3 removeAnimation:(unsigned long long)arg4;
- (void)paste:(id)arg1;
- (void)copy:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (BOOL)autoscroll:(id)arg1;
- (BOOL)resignFirstResponder;
- (void)keyDown:(id)arg1;
- (id)menuForEvent:(id)arg1;
- (void)performWithAnimatorOff:(CDUnknownBlockType)arg1;
- (id)animator;
@property id <NCTableViewDelegate> delegate;

@end

@interface NCBannerWindowController : NSObject <NCBannerAnimationDelegate>
{
    _NCBannersWindow *_window;
    NSView *_contentView;
    NSMutableArray *_windows;
    struct CGRect _visibleRect;
    struct CGRect _screenRect;
    double _rightColumnConstraintConstant;
    double _dockRightMargin;
    long long _windowRaiseCount;
    long long _normalWindowLevel;
    long long _animationWindowLevel;
    NSHashTable *_coalescedSlideOutBanners;
    NSObject<OS_dispatch_source> *_coalescedSlideOutTimer;
    _Bool _lockscreenMode;
    _Bool _disableAnimations;
    id <NCBannerWindowControllerDelegate> _delegate;
}

@property __weak id <NCBannerWindowControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) _Bool disableAnimations; // @synthesize disableAnimations=_disableAnimations;
@property(nonatomic) _Bool lockscreenMode; // @synthesize lockscreenMode=_lockscreenMode;
@property(retain, nonatomic) NSArray *windows; // @synthesize windows=_windows;
@property(readonly) NSPanel *window; // @synthesize window=_window;
- (void).cxx_destruct;
- (void)_animateWithDuration:(double)arg1 change:(CDUnknownBlockType)arg2 completed:(CDUnknownBlockType)arg3;
- (struct CGRect)_windowFrame;
- (void)_orderWindowOnIfNecessary;
- (void)_orderWindowOutIfNecessary;
- (void)_sortViews;
- (void)_horizontalLayout;
- (void)_recalculateOverflow;
- (void)_lockVerticalConstraintForWindow:(id)arg1;
- (void)_addHorizontalConstraintToWindow:(id)arg1;
- (void)_addVerticalConstraintToWindow:(id)arg1;
- (void)_fixupVerticalConstraints;
- (void)_insertWindow:(id)arg1 atIndex:(long long)arg2 withAnimation:(int)arg3;
- (id)_prepareMoveWindow:(id)arg1 fromIndex:(long long)arg2 toIndex:(long long)arg3;
- (id)_prepareInsertWindow:(id)arg1 atIndex:(long long)arg2 withAnimation:(int)arg3;
- (id)_prepareAnimationAndRemoveWindow:(id)arg1 withAnimationType:(int)arg2;
- (void)bannerAnimationDoneRaisedWindowLevel:(id)arg1;
- (void)bannerAnimationNeedsRaisedWindowLevel:(id)arg1;
- (void)performAnimationsDisabled:(CDUnknownBlockType)arg1;
- (id)existingBannerDisplayedByApplication:(id)arg1;
- (void)layoutWindowForScreenRect:(struct CGRect)arg1 visibleRect:(struct CGRect)arg2;
- (void)replaceWindows:(id)arg1;
- (void)removeWindows:(id)arg1 withAnimation:(int)arg2;
- (void)removeWindow:(id)arg1 withAnimation:(int)arg2;
- (void)replaceWindow:(id)arg1 withWindow:(id)arg2;
- (void)insertWindow:(id)arg1 above:(id)arg2 withAnimation:(int)arg3;
- (void)insertWindow:(id)arg1 below:(id)arg2 withAnimation:(int)arg3;
- (void)addWindow:(id)arg1 withAnimation:(int)arg2;
@property(readonly) double rightMargin;
- (id)initWithScreenFrame:(struct CGRect)arg1 andVisibleFrame:(struct CGRect)arg2 spaces:(id)arg3;

@end

@interface _NCBannersWindow : NSPanel
{
    NCBannerWindowController *_owner;
}

@property __weak NCBannerWindowController *owner; // @synthesize owner=_owner;
- (void).cxx_destruct;
- (BOOL)_hasActiveControls;
- (void)recalculateKeyViewLoop;
- (BOOL)accessibilityIsIgnored;
- (void)keyDown:(id)arg1;
- (BOOL)canBecomeKeyWindow;
- (id)initWithFrame:(struct CGRect)arg1 spaces:(id)arg2;

@end

@interface NCShareWidgetService : NSObject
{
    _Bool _configured;
    NSString *_imageName;
    NSString *_actionTitle;
    NSString *_serviceIdentifier;
    NSString *_serviceName;
}

+ (id)services;
@property _Bool configured; // @synthesize configured=_configured;
@property(readonly) NSString *serviceName; // @synthesize serviceName=_serviceName;
@property(readonly) NSString *serviceIdentifier; // @synthesize serviceIdentifier=_serviceIdentifier;
@property(readonly) NSString *actionTitle; // @synthesize actionTitle=_actionTitle;
@property(readonly) NSString *imageName; // @synthesize imageName=_imageName;
- (void).cxx_destruct;
- (_Bool)checkConfigured;
- (_Bool)checkAndUpdateConfigured;
- (id)initWithImageName:(id)arg1 serviceIdentifier:(id)arg2;

@end

@interface NCShareTwitterService : NCShareWidgetService
{
}

- (_Bool)checkConfigured;
- (id)init;

@end

@interface NCShareFacebookService : NCShareWidgetService
{
}

- (_Bool)checkConfigured;
- (id)init;

@end

@interface NCShareMessagesService : NCShareWidgetService
{
}

- (_Bool)checkConfigured;
- (id)init;

@end

@interface NCShareLinkedIn : NCShareWidgetService
{
}

- (_Bool)checkConfigured;
- (id)init;

@end

@interface NCShareSienaService : NCShareWidgetService
{
}

- (_Bool)checkConfigured;
- (id)init;

@end

@interface NCShareTencentSienaService : NCShareWidgetService
{
}

- (_Bool)checkConfigured;
- (id)init;

@end

@interface NCModel : NSObject <QLPreviewItem>
{
    NCAppInfo *_app;
    NSUserNotification *_note;
    BOOL _drawsDividerLine;
    NSMutableArray *_notifications;
    NSString *_commonNotificationTitle;
    int _type;
    NCWidget *_widget;
    NSProgress *_progress;
    unsigned long long _notesRepresented;
    double _cachedRowHeight;
}

+ (id)modelForType:(int)arg1;
+ (id)progressModel:(id)arg1 app:(id)arg2;
+ (id)widgetModel:(id)arg1;
+ (id)modelWithApp:(id)arg1 note:(id)arg2;
@property(readonly) NSArray *notifications; // @synthesize notifications=_notifications;
@property int type; // @synthesize type=_type;
@property double cachedRowHeight; // @synthesize cachedRowHeight=_cachedRowHeight;
@property unsigned long long notesRepresented; // @synthesize notesRepresented=_notesRepresented;
@property(retain) NSProgress *progress; // @synthesize progress=_progress;
@property(retain) NCWidget *widget; // @synthesize widget=_widget;
@property BOOL drawsDividerLine; // @synthesize drawsDividerLine=_drawsDividerLine;
@property(retain) NSUserNotification *note; // @synthesize note=_note;
@property(retain) NCAppInfo *app; // @synthesize app=_app;
- (void).cxx_destruct;
@property(readonly) NSString *previewItemTitle;
@property(readonly) NSURL *previewItemURL;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
@property(readonly) NSString *commonNotificationTitle;
- (void)addAnonymouseNotificationCount:(unsigned long long)arg1;
- (void)addNotification:(id)arg1;
- (id)copyModelForMultiNotification;
- (id)description;

// Remaining properties
@property(readonly) id previewItemDisplayState;

@end

@interface _NCWhiteTextButton : NSButton
{
}

- (void)awakeFromNib;

@end

@interface NCDebugWindow : NSWindowController
{
    _Bool _dndModeEnabled;
    int _screenLockMode;
    id <NCDebugWindowDelegate> _delegate;
}

@property(nonatomic) int screenLockMode; // @synthesize screenLockMode=_screenLockMode;
@property(nonatomic) _Bool dndModeEnabled; // @synthesize dndModeEnabled=_dndModeEnabled;
@property(retain) id <NCDebugWindowDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)windowDidLoad;
- (id)initWithWindow:(id)arg1;
- (id)init;

@end

@interface NCRoundedWindowContentView : NSView
{
    CALayer *_backgroundLayer;
    CALayer *_hitLayer;
    double _height;
    double _lastDragDeltaX;
    BOOL _dragStartedLeft;
    BOOL _wasAcceptingMouseEvents;
    BOOL _mouseDownInView;
    BOOL _mouseInView;
    BOOL _dragging;
    BOOL _delegateSupportsClick;
    BOOL _delegateSupportsEnterExit;
    BOOL _delegateSupportsCloseButton;
    BOOL _delegateSupportsScroll;
    BOOL _delegateSupportsDragging;
    BOOL _delegateSupportsLayout;
    BOOL _delegateSupportsUpdateConstraints;
    BOOL _needsLayout;
    BOOL _contentHidden;
    id <NCRoundedWindowContentDelegate> _delegate;
}

@property(nonatomic) __weak id <NCRoundedWindowContentDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) BOOL contentHidden; // @synthesize contentHidden=_contentHidden;
- (void).cxx_destruct;
- (void)_closeButtonPressed:(id)arg1;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (BOOL)accessibilityIsIgnored;
- (void)scrollWheel:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)updateConstraints;
- (void)updateLayer;
- (void)layout;
- (void)_updateBackgroundLayer;
- (void)viewDidChangeBackingProperties;
- (BOOL)isOpaque;
- (BOOL)wantsUpdateLayer;
- (BOOL)isFlipped;
- (void)_updateLayerMasksToBoundsFromView;
- (BOOL)clipsToBounds;
- (void)awakeFromNib;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface NCBanner : NCNotificationWindow <NCRoundedWindowContentDelegate, NSTextViewDelegate, NCAlertButtonDelegate, NCBannerViewControllerDelegate>
{
    NSLayoutConstraint *_buttonHeightConstraint;
    NCBaseBannerViewController *_contentViewController;
    double _originalMaxHeight;
    double _originalMinHeight;
    double _originalInputHeight;
    double _maxButtonWidth;
    double _maxButtonHeight;
    double _minButtonWidth;
    BOOL _shownAsOverflow;
    BOOL _actionIsSnooze;
    BOOL _hasAlternativeActions;
    BOOL _hasText;
    unsigned int _talkingAlertID;
    NSObject<OS_dispatch_source> *_actionArrowTimer;
    NSObject<OS_dispatch_source> *_exit_timer;
    NSMutableArray *_queuedChanges;
    _Bool _showButtons;
    _Bool _showReply;
    NSView *_inputView;
    NSLayoutConstraint *_contentHolderConstraint;
    NSLayoutConstraint *_contentMinHeightConstraint;
    NSLayoutConstraint *_contentToInputConstraint;
    NSLayoutConstraint *_actionButtonHeightConstraint;
    NSLayoutConstraint *_closeButtonConstraint;
    NSLayoutConstraint *_closeButtonHeightConstraint;
    NSButton *_cancelButton;
    NCAlertButton *_actionButton;
    NSTextView *_replyTextView;
    NSLayoutConstraint *_inputHeightConstraint;
    NSLayoutConstraint *_inputHeightMaxConstraint;
    NSLayoutConstraint *_buttonContainerWidthConstraint;
    NCIdentityImageView *_imageView;
    NSView *_buttonContainer;
    NSView *_contentContainer;
    NCAlertScrollView *_contentScroller;
    NSView *_inputContainer;
    double _dismissTime;
    struct CGPoint _displayMousePosition;
    struct CGPoint _lastMousePosition;
}

+ (Class)contentClass;
+ (double)defaultSnoozeTime;
@property struct CGPoint lastMousePosition; // @synthesize lastMousePosition=_lastMousePosition;
@property struct CGPoint displayMousePosition; // @synthesize displayMousePosition=_displayMousePosition;
@property(nonatomic) double dismissTime; // @synthesize dismissTime=_dismissTime;
@property(nonatomic) _Bool showReply; // @synthesize showReply=_showReply;
@property(readonly) NCBaseBannerViewController *contentViewController; // @synthesize contentViewController=_contentViewController;
@property NSView *inputContainer; // @synthesize inputContainer=_inputContainer;
@property NCAlertScrollView *contentScroller; // @synthesize contentScroller=_contentScroller;
@property NSView *contentContainer; // @synthesize contentContainer=_contentContainer;
@property(retain) NSView *buttonContainer; // @synthesize buttonContainer=_buttonContainer;
@property NCIdentityImageView *imageView; // @synthesize imageView=_imageView;
@property NSLayoutConstraint *buttonContainerWidthConstraint; // @synthesize buttonContainerWidthConstraint=_buttonContainerWidthConstraint;
@property NSLayoutConstraint *inputHeightMaxConstraint; // @synthesize inputHeightMaxConstraint=_inputHeightMaxConstraint;
@property NSLayoutConstraint *inputHeightConstraint; // @synthesize inputHeightConstraint=_inputHeightConstraint;
@property NSTextView *replyTextView; // @synthesize replyTextView=_replyTextView;
@property NCAlertButton *actionButton; // @synthesize actionButton=_actionButton;
@property NSButton *cancelButton; // @synthesize cancelButton=_cancelButton;
@property NSLayoutConstraint *closeButtonHeightConstraint; // @synthesize closeButtonHeightConstraint=_closeButtonHeightConstraint;
@property NSLayoutConstraint *closeButtonConstraint; // @synthesize closeButtonConstraint=_closeButtonConstraint;
@property NSLayoutConstraint *actionButtonHeightConstraint; // @synthesize actionButtonHeightConstraint=_actionButtonHeightConstraint;
@property(retain) NSLayoutConstraint *contentToInputConstraint; // @synthesize contentToInputConstraint=_contentToInputConstraint;
@property(retain) NSLayoutConstraint *contentMinHeightConstraint; // @synthesize contentMinHeightConstraint=_contentMinHeightConstraint;
@property(retain) NSLayoutConstraint *contentHolderConstraint; // @synthesize contentHolderConstraint=_contentHolderConstraint;
@property(retain) NSView *inputView; // @synthesize inputView=_inputView;
@property(nonatomic) _Bool showButtons; // @synthesize showButtons=_showButtons;
- (void).cxx_destruct;
- (void)alertButton:(id)arg1 itemSelectedWithContext:(id)arg2;
- (void)alertButton:(id)arg1 createItemsUsingBlock:(CDUnknownBlockType)arg2;
- (void)_createSnoozeActionButtons:(CDUnknownBlockType)arg1;
- (BOOL)alertButtonHasDelayedMenu:(id)arg1;
- (void)bannerViewEventTimeEnded:(id)arg1;
- (void)textDidChange:(id)arg1;
- (BOOL)textView:(id)arg1 doCommandBySelector:(SEL)arg2;
- (void)cancelTalkingAlert;
- (void)registerTalkingAlertIfNecessary;
- (BOOL)contentView:(id)arg1 dragStarted:(id)arg2;
- (BOOL)contentView:(id)arg1 scrolled:(id)arg2;
- (void)contentViewLayedOut:(id)arg1;
- (void)contentView:(id)arg1 mouseEntered:(BOOL)arg2;
- (void)contentView:(id)arg1 mouseClicked:(long long)arg2;
- (void)_uninstallReplyView;
- (void)_installReplyViewIfNecessary;
- (void)addQueuedNotification:(id)arg1;
- (void)windowAnimateInComplete;
- (void)_checkForAutoDismissWithMouseLocation:(struct CGPoint)arg1;
- (void)snooze:(id)arg1;
- (void)_modelDidUpdate;
- (void)contentViewUpdateConstraints:(id)arg1;
- (void)buttonAction:(id)arg1;
@property(retain, nonatomic) NCModel *model;
@property(readonly) NCAppInfo *application;
@property(readonly) NSUserNotification *notification;
- (id)bannerDelegate;
- (id)accessibilitySubRole;
- (void)setLockscreenMode:(_Bool)arg1;
- (id)nibName;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithModel:(id)arg1 withBehavior:(int)arg2 lockscreenMode:(_Bool)arg3;
- (id)initWithModel:(id)arg1 withBehavior:(int)arg2;
- (id)initWithModel:(id)arg1;

@end

@interface NCIdentityImageView : NSImageView
{
    CALayer *_maskLayer;
    CALayer *_innerGlow;
    BOOL _showsBorder;
}

@property(nonatomic) BOOL showsBorder; // @synthesize showsBorder=_showsBorder;
- (void).cxx_destruct;
- (void)updateLayer;
- (BOOL)wantsUpdateLayer;
- (void)awakeFromNib;

@end

@interface NCBannerImageTransformer : NSValueTransformer
{
}

- (id)transformedValue:(id)arg1;

@end

@interface NCJSONTransformer : NSValueTransformer
{
}

- (id)reverseTransformedValue:(id)arg1;
- (id)transformedValue:(id)arg1;

@end

@interface NCStatusButtonCell : NSButtonCell
{
    BOOL _inFS;
    BOOL _darkBackground;
    BOOL _doNotDisturbMode;
    BOOL _lockScreenMode;
    NSButton *_buttonView;
    NSStatusItem *_statusItem;
}

@property(nonatomic) BOOL lockScreenMode; // @synthesize lockScreenMode=_lockScreenMode;
@property NSStatusItem *statusItem; // @synthesize statusItem=_statusItem;
@property NSButton *buttonView; // @synthesize buttonView=_buttonView;
@property(nonatomic) BOOL doNotDisturbMode; // @synthesize doNotDisturbMode=_doNotDisturbMode;
@property(nonatomic) BOOL darkBackground; // @synthesize darkBackground=_darkBackground;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (BOOL)isHighlighted;

@end

@interface NCPoof : NSObject
{
    NCNotificationWindow *_windowToPoof;
    CALayer *_poofLayer;
    double _duration;
}

+ (double)poofTime;
+ (void)poofWindow:(id)arg1 completion:(CDUnknownBlockType)arg2;
@property double duration; // @synthesize duration=_duration;
@property(retain) NCNotificationWindow *windowToPoof; // @synthesize windowToPoof=_windowToPoof;
- (void).cxx_destruct;
- (void)go;
- (void)_addAnimationsToPoofs;
- (void)_setup;
- (void)_loadPoofLayersInAreaWithSize:(struct CGSize)arg1;
- (void)dealloc;

@end

@interface NCNotificationWindow : NSObject <NCRoundedWindowContentDelegate, NSCopying>
{
    NSArray *_topLevelNibObjects;
    NSMutableSet *_constraints;
    NSLayoutConstraint *_horizontalLayoutConstraint;
    BOOL applicationUpdated;
    BOOL _closing;
    BOOL _needsLayout;
    char *_swipeAnimationCanceled;
    BOOL _trackingSwipes;
    unsigned long long _uniqueCreationNumber;
    _Bool _firstDisplayedAtLockscreen;
    _Bool _lockscreenMode;
    BOOL _animating;
    BOOL _hiddenDueToOverflow;
    int _behavior;
    NCRoundedWindowContentView *_view;
    id <NCNotificationWindowDelegate> _delegate;
    NSLayoutConstraint *_heightMaxConstraint;
    double _displayTime;
    NSLayoutConstraint *_verticalLayoutConstraint;
    NSMutableArray *_activeAnimations;
}

+ (unsigned long long)notificationWidth;
@property(readonly) NSMutableArray *activeAnimations; // @synthesize activeAnimations=_activeAnimations;
@property(retain) NSLayoutConstraint *verticalLayoutConstraint; // @synthesize verticalLayoutConstraint=_verticalLayoutConstraint;
@property(readonly) NSMutableSet *constraints; // @synthesize constraints=_constraints;
@property int behavior; // @synthesize behavior=_behavior;
@property BOOL hiddenDueToOverflow; // @synthesize hiddenDueToOverflow=_hiddenDueToOverflow;
@property double displayTime; // @synthesize displayTime=_displayTime;
@property BOOL animating; // @synthesize animating=_animating;
@property(nonatomic) _Bool lockscreenMode; // @synthesize lockscreenMode=_lockscreenMode;
@property _Bool firstDisplayedAtLockscreen; // @synthesize firstDisplayedAtLockscreen=_firstDisplayedAtLockscreen;
@property(retain) NSLayoutConstraint *heightMaxConstraint; // @synthesize heightMaxConstraint=_heightMaxConstraint;
@property id <NCNotificationWindowDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain) NSLayoutConstraint *horizontalLayoutConstraint; // @synthesize horizontalLayoutConstraint=_horizontalLayoutConstraint;
@property(retain) NCRoundedWindowContentView *view; // @synthesize view=_view;
- (void).cxx_destruct;
- (void)contentView:(id)arg1 velocity:(double)arg2 draggedCompleted:(BOOL)arg3;
- (void)contentView:(id)arg1 dragged:(id)arg2;
- (BOOL)contentView:(id)arg1 dragStarted:(id)arg2;
- (BOOL)contentView:(id)arg1 scrolled:(id)arg2;
- (void)performDropInAnimationWithDuration:(double)arg1 completion:(CDUnknownBlockType)arg2;
- (id)accessibilityActionNames;
- (void)cancelTalkingAlert;
- (void)registerTalkingAlertIfNecessary;
- (void)pulseIcon;
- (void)windowAnimateOutComplete;
- (void)windowAnimateOutStart;
- (void)windowAnimateInComplete;
- (void)dumpLayerTree;
- (void)removeFromView;
- (long long)compareForDisplay:(id)arg1;
- (void)internalLayout;
@property(readonly) BOOL onScreen;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (BOOL)accessibilityIsIgnored;
@property(readonly) NSString *accessibilitySubRole;
- (int)behaviorType;
@property(readonly) NSString *nibName;
@property(readonly) BOOL hasContentView;
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithBehavior:(int)arg1 inLockscreen:(BOOL)arg2;
- (id)initWithBehavior:(int)arg1;
- (id)init;
- (unsigned long long)minNotificationHeight;
- (unsigned long long)maxNotificationHeight;

@end

@interface NCDockCommunication : NSObject
{
    BOOL _needsAuthentication;
    BOOL _serverConnectionFailure;
    BOOL _debugShieldWindows;
    NSObject<OS_xpc_object> *_connection;
    NSObject<OS_dispatch_queue> *_connection_queue;
    double _centerWidth;
    unsigned long long _notificationSpaceID;
    unsigned int _lastDisplay;
    NSWindow *_mainWindow;
    NSWindow *_shieldWindow;
    NSWindow *_alertWindow;
    NSSet *_dockControlledWIDs;
}

- (void).cxx_destruct;
- (void)_dockMessageTransitionEvent:(id)arg1;
- (id)_serverConnection;
- (void)_send_connection_authentication;
- (void)sendGestureEnd:(BOOL)arg1;
- (void)sendGestureProgress:(double)arg1;
- (void)sendGestureStart;
- (void)sendNotificationCenterOpen:(BOOL)arg1 display:(unsigned int)arg2;
- (void)_sendXPCMessage:(int)arg1 block:(CDUnknownBlockType)arg2;
- (void)dockAlive;
- (id)initWithNoteWindow:(id)arg1 shieldWindow:(id)arg2 alertsWindow:(id)arg3 space:(unsigned long long)arg4 width:(double)arg5;

@end

@interface NCApplication : NSApplication
{
}

- (id)accessibilityAttributeValue:(id)arg1;
- (void)_cycleWindowsReversed:(BOOL)arg1;
- (id)makeWindowsPerform:(SEL)arg1 inOrder:(BOOL)arg2;
- (BOOL)_sendScreenNotificationWhenDockSizeChanges;

@end

@interface NCTexturedView : NSView
{
    CAGradientLayer *_backgroundGradient;
    CAGradientLayer *_sideShadow;
    _Bool _textureVisible;
}

@property(nonatomic) _Bool textureVisible; // @synthesize textureVisible=_textureVisible;
- (void).cxx_destruct;
- (void)updateGradientFrameRect:(struct CGRect)arg1;
- (void)awakeFromNib;

@end

@interface NCEventTrapWindow : NSPanel
{
}

- (BOOL)accessibilityIsIgnored;
- (void)sendEvent:(id)arg1;
- (void)rightMouseDown:(id)arg1;
- (BOOL)canBecomeKeyWindow;
@property id <NCEventTrapWindowDelegate> delegate;
- (BOOL)isOpaque;
- (id)init;

@end

@interface NCHotKey : NSObject
{
    unsigned int _cid;
    NSObject<OS_dispatch_source> *_source;
    void *_lsNoteID;
    double _openTime;
    CDUnknownBlockType _focusChangeNotification;
}

+ (id)sharedManager;
@property(copy, nonatomic) CDUnknownBlockType focusChangeNotification; // @synthesize focusChangeNotification=_focusChangeNotification;
- (void).cxx_destruct;
- (void)_handleEvents;
- (void)dealloc;
- (id)init;

@end

@interface NCWindowLayoutController : NSObject <NCBannerDelegate, NCBannerWindowControllerDelegate>
{
    NSMutableArray *_placeholderAlerts;
    NCBanner *_keyAlert;
    NCBanner *_replyAlert;
    NSHashTable *_notificationsInReplyThatShouldGoAway;
    NSMutableDictionary *_coalescedNotificationWindows;
    double _rightColumnConstraintConstant;
    BOOL _alertsDisabled;
    NCBannerWindowController *_bannerWindow;
    NSHashTable *_allNotifications;
    NSMutableDictionary *_notificationsPerApplication;
    NSMutableArray *_pendingDarkWakeNotifications;
    double _screenLockedTime;
    double _screenLockDisplayTime;
    unsigned int _powerAssertionID;
    double _powerAssertionTime;
    double _bannerTime;
    double _lockscreenBannerTime;
    BOOL _centerOpen;
    BOOL _windowCanBecomeKey;
    int _lockscreenMode;
    id <NCWindowLayoutDelegate> _delegate;
    NCBanner *_currentBanner;
}

@property(nonatomic) BOOL windowCanBecomeKey; // @synthesize windowCanBecomeKey=_windowCanBecomeKey;
@property(nonatomic) int lockscreenMode; // @synthesize lockscreenMode=_lockscreenMode;
@property(readonly, nonatomic) NCBanner *currentBanner; // @synthesize currentBanner=_currentBanner;
@property(nonatomic) BOOL alertsDisabled; // @synthesize alertsDisabled=_alertsDisabled;
@property(nonatomic) BOOL centerOpen; // @synthesize centerOpen=_centerOpen;
@property id <NCWindowLayoutDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)bannerShouldDismiss:(id)arg1;
- (void)bannerTextCleared:(id)arg1;
- (void)bannerTextTyped:(id)arg1;
- (void)bannerHidInlineReply:(id)arg1;
- (void)bannerShowedInlineReply:(id)arg1;
- (void)banner:(id)arg1 snoozedWithTimeInterval:(double)arg2;
- (void)bannerClose:(id)arg1;
- (void)bannerPerformActionAndDismiss:(id)arg1;
- (void)bannerContentClicked:(id)arg1;
- (void)notificationWindowDismissTimeElapsed:(id)arg1;
- (void)notificationWindow:(id)arg1 velocity:(double)arg2 draggedCompleted:(BOOL)arg3;
- (void)notificationWindow:(id)arg1 dragged:(id)arg2;
- (BOOL)notificationWindow:(id)arg1 dragStarted:(id)arg2;
- (void)notificationWindowSwipeEnded:(id)arg1 cancelled:(BOOL)arg2;
- (void)notificationWindowSwipeProgressed:(id)arg1 progress:(double)arg2;
- (BOOL)notificationWindowSwipeStarted:(id)arg1 rightToLeft:(BOOL)arg2 withEvent:(id)arg3;
- (BOOL)notificationWindowCanSwipe:(id)arg1 left:(BOOL)arg2;
- (void)bannerWindow:(id)arg1 windowsHiddenDueToOverflow:(id)arg2;
- (void)bannerWindowOrderedOut:(id)arg1;
- (_Bool)bannerWindowCanBecomeKey:(id)arg1;
- (void)_purgeStalePlaceholders;
- (void)_animateAlertOff:(id)arg1 animation:(int)arg2;
- (void)_removeNotification:(id)arg1 forApplication:(id)arg2;
- (void)_removeNotificationWindow:(id)arg1;
- (void)_addNotificationWindow:(id)arg1;
- (void)_addBannerNotificationByCoalescing:(id)arg1;
- (id)_matchExistingDisplayedBanner:(id)arg1;
- (id)_matchExistingBanner:(id)arg1;
- (void)_closeBanner:(id)arg1;
- (void)_clearBannerAssertion;
- (void)_refreshPowerAssertion;
- (double)_displayTimeForModel:(id)arg1;
- (BOOL)_shouldTakePowerAssertion;
- (void)debugDump:(id)arg1;
- (void)removePlaceholderAlert:(id)arg1;
- (void)addPlaceholderAlert:(id)arg1 restore:(_Bool)arg2 animation:(int)arg3;
- (BOOL)switchKeyNotification:(BOOL)arg1;
- (BOOL)canSwitchKeyNotifications;
- (void)layoutWindowForScreenRect:(struct CGRect)arg1 visibleRect:(struct CGRect)arg2;
- (void)updateAlert:(id)arg1 forApplication:(id)arg2;
- (void)removeBannersForApplication:(id)arg1;
- (void)removeAllDisplayedNotificationsForApplication:(id)arg1;
- (void)removeDisplayedNotification:(id)arg1 forApplication:(id)arg2;
- (void)restoreDisplayedNotifications:(id)arg1 forApplication:(id)arg2;
- (void)_coalesceLockScreenWindows:(id)arg1 hideForLockscreen:(_Bool)arg2;
- (void)_addNotificationOutOfLockscreen:(id)arg1 display:(_Bool)arg2 animation:(int)arg3;
- (id)_windowToAddBannerBelow:(id)arg1;
- (void)_addNotificationInLockscreen:(id)arg1 display:(_Bool)arg2 animation:(int)arg3;
- (void)_addNotificationWindow:(id)arg1 withAnimation:(int)arg2;
- (_Bool)_notificationShouldBeDisplayedInCurrentState:(id)arg1 displayTime:(double)arg2;
- (void)displayNotification:(id)arg1 forApplication:(id)arg2 withUnpresentedCount:(unsigned long long)arg3;
@property(readonly, nonatomic) NSMutableArray *visibleWindows;
- (id)sortedWindows;
- (BOOL)hasVisibleWindows;
@property(readonly, nonatomic) long long windowLevel;
@property(readonly) NSWindow *window;
- (void)dealloc;
- (id)initWithScreenFrame:(struct CGRect)arg1 andVisibleFrame:(struct CGRect)arg2 spaces:(id)arg3;

@end

@interface NCCloseButtonCell : NSButtonCell
{
}

- (void)drawFocusRingMaskWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface NSAppTableCellView : NCTableCellView
{
    double _originalTimeWidthTrailing;
    BOOL _needsDateUpdates;
    NSLayoutConstraint *_appNameWidthConstraint;
    NSLayoutConstraint *_timeWidthTrailingConstraint;
    NSTextField *_timeTextField;
    NSTextField *_appTextField;
}

+ (id)shortDateFormatter;
+ (id)dateFormatter;
@property NSTextField *appTextField; // @synthesize appTextField=_appTextField;
@property NSTextField *timeTextField; // @synthesize timeTextField=_timeTextField;
@property NSLayoutConstraint *timeWidthTrailingConstraint; // @synthesize timeWidthTrailingConstraint=_timeWidthTrailingConstraint;
@property NSLayoutConstraint *appNameWidthConstraint; // @synthesize appNameWidthConstraint=_appNameWidthConstraint;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)updateDate;
- (void)_updateDate;
- (void)setCellsForObjectValue;
- (void)setObjectValue:(id)arg1;
- (void)dealloc;
- (void)awakeFromNib;

@end

@interface _NCBlankCell : NSButtonCell
{
    struct CGPoint _trackingStart;
    BOOL _ignoreNextStateChange;
}

@property BOOL ignoreNextStateChange; // @synthesize ignoreNextStateChange=_ignoreNextStateChange;
- (void)drawFocusRingMaskWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)setNextState;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (void)stopTracking:(struct CGPoint)arg1 at:(struct CGPoint)arg2 inView:(id)arg3 mouseIsUp:(BOOL)arg4;
- (BOOL)continueTracking:(struct CGPoint)arg1 at:(struct CGPoint)arg2 inView:(id)arg3;
- (BOOL)startTrackingAt:(struct CGPoint)arg1 inView:(id)arg2;
- (void)layoutLayerWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGRect)imageRectForBounds:(struct CGRect)arg1;

@end

@interface NCSwitchButton : NSButton
{
    CALayer *_topLayer;
    CALayer *_contentsLayer;
    CALayer *_knobLayer;
    struct CGRect _offFrame;
    struct CGRect _offKnobFrame;
    struct CGRect _onFrame;
    struct CGRect _onKnobFrame;
    NSDictionary *_imageNameForLayer;
}

+ (Class)cellClass;
- (void).cxx_destruct;
- (void)updateCell:(id)arg1;
- (void)viewDidChangeBackingProperties;
- (void)updateLayer;
- (struct CGSize)intrinsicContentSize;
- (void)layout;
- (void)setState:(long long)arg1;
- (void)knobDragged:(double)arg1 done:(BOOL)arg2 mouseUp:(BOOL)arg3;
- (BOOL)layer:(id)arg1 shouldInheritContentsScale:(double)arg2 fromWindow:(id)arg3;
- (BOOL)wantsUpdateLayer;
- (void)drawRect:(struct CGRect)arg1;
- (void)awakeFromNib;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface NCPrefsButtonCell : NSButtonCell
{
}

- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (void)drawFocusRingMaskWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface NCWidget : NSObject
{
    BOOL _hidden;
    NSString *_widgetID;
    NSString *_path;
    double _width;
    NCWidgetRowCellView *_cellView;
}

@property BOOL hidden; // @synthesize hidden=_hidden;
@property NCWidgetRowCellView *cellView; // @synthesize cellView=_cellView;
@property(readonly) double width; // @synthesize width=_width;
@property(readonly) NSString *path; // @synthesize path=_path;
@property(readonly) NSString *widgetID; // @synthesize widgetID=_widgetID;
- (void).cxx_destruct;
- (void)widgetLocationUpdated;
- (void)widgetViewShown;
- (void)widgetViewHidden;
- (void)widgetRemovedFromView;
- (void)widgetInsertedIntoView;
@property(readonly) NSString *accessibilityDescriptionKey;
@property(readonly) BOOL loading;
@property(readonly) BOOL available;
- (id)initWithID:(id)arg1 path:(id)arg2 width:(double)arg3;

// Remaining properties
@property(readonly) double height; // @dynamic height;
@property(readonly) NSView *view; // @dynamic view;

@end

@interface NCWindowPluginLayerView : NSView
{
    CAPluginLayer *_pluginLayer;
    unsigned int _wid;
}

@property(nonatomic) unsigned int wid; // @synthesize wid=_wid;
- (void).cxx_destruct;
- (void)layout;
- (void)setFrameSize:(struct CGSize)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface NCWidgetRowCellView : NCTableCellView
{
    CALayer *_dividerLine;
    NSArray *_constraints;
    NSTableView *_tableView;
    NSLayoutConstraint *_leftLayoutConstraint;
    NSLayoutConstraint *_columnWidthConstraint;
}

@property NSLayoutConstraint *columnWidthConstraint; // @synthesize columnWidthConstraint=_columnWidthConstraint;
@property NSLayoutConstraint *leftLayoutConstraint; // @synthesize leftLayoutConstraint=_leftLayoutConstraint;
@property(retain) NSTableView *tableView; // @synthesize tableView=_tableView;
- (void).cxx_destruct;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (void)setObjectValue:(id)arg1;
- (void)updateLayer;
- (BOOL)wantsUpdateLayer;
- (void)viewDidChangeBackingProperties;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface NCRemoteWidget : NCWidget
{
    NSObject<OS_xpc_object> *_connection;
    NCWindowPluginLayerView *_view;
    double _height;
    int _state;
}

@property int state; // @synthesize state=_state;
- (double)height;
- (id)view;
- (void).cxx_destruct;
- (void)_sendPositionChange:(struct CGPoint)arg1;
- (void)_requestWindowInfo;
- (void)_connect;
- (void)updateOrigin:(id)arg1;
- (void)widgetRemovedFromView;
- (void)widgetInsertedIntoView;
- (id)_containingCellView;
- (id)initWithID:(id)arg1 andWidth:(double)arg2;

@end

@interface _NCShareButton : NSButton
{
}

+ (Class)cellClass;
@property(readonly, nonatomic) NCShareButtonCell *shareCell;
- (void)setTitleImage:(id)arg1;

@end

@interface NCShareWidget : NCWidget <NSSharingServiceDelegate>
{
    CAPluginLayer *_pluginLayer;
    NSArray *_topLevelObjects;
    double _height;
    double _originalHeight;
    NSObject<OS_dispatch_source> *_configuration_timer;
    int _notify_token;
    id _shareRestoreState;
    NSString *_shareRestoreService;
    BOOL _saveShareState;
    BOOL _showingShareSheet;
    BOOL _loading;
    NSArray *_services;
    BOOL _configurationHasBeenUpdated;
    BOOL _twitterConfigured;
    BOOL _facebookConfigured;
    BOOL _weiboConfigured;
    BOOL _tencentWeiboConfigured;
    BOOL _messagesConfigured;
    NSString *_localizedTwitterName;
    NSString *_localizedFacebookName;
    NSString *_localizedWeiboName;
    NSString *_localizedTencentWeiboName;
    NSString *_localizedMessagesName;
    NSObject<OS_dispatch_source> *_refreshSource;
    _Bool _showing;
    NCWindowPluginLayerView *_view;
    NSView *_buttonView;
    NSLayoutConstraint *_buttonViewWidthConstraint;
}

@property(retain) NSLayoutConstraint *buttonViewWidthConstraint; // @synthesize buttonViewWidthConstraint=_buttonViewWidthConstraint;
@property(retain) NSView *buttonView; // @synthesize buttonView=_buttonView;
@property(retain) NCWindowPluginLayerView *view; // @synthesize view=_view;
- (double)height;
- (void).cxx_destruct;
- (void)sharingService:(id)arg1 hideWindowWithID:(unsigned int)arg2 success:(BOOL)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)sharingService:(id)arg1 didShareItems:(id)arg2;
- (void)sharingService:(id)arg1 didFailToShareItems:(id)arg2 error:(id)arg3;
- (void)sharingService:(id)arg1 willShareItems:(id)arg2;
- (void)sharingService:(id)arg1 showWindowWithID:(unsigned int)arg2;
- (id)sharingService:(id)arg1 sourceWindowForShareItems:(id)arg2 sharingContentScope:(long long *)arg3;
- (void)_shareWithService:(id)arg1 restoreState:(id)arg2;
- (void)share:(id)arg1;
- (void)updateOrigin:(id)arg1;
- (void)checkAccountConfiguration;
- (void)_accountsChanged;
- (void)widgetLocationUpdated;
- (void)widgetViewShown;
- (void)widgetViewHidden;
- (void)widgetRemovedFromView;
- (void)widgetInsertedIntoView;
- (void)_layoutSharebuttons;
- (id)accessibilityDescriptionKey;
- (id)_containingCellView;
- (BOOL)available;
- (void)dealloc;
- (id)initForWidth:(double)arg1;

@end

@interface NCDNDWidget : NCWidget
{
    double _height;
    double _originalHeight;
    double _originalDescriptionMaxHeight;
    NSLayoutConstraint *_centeringConstraint;
    NSDate *_dateTurnedOn;
    int _timeToken;
    BOOL _doNotDisturb;
    NSView *_view;
    NSView *_textContainer;
    NSTextField *_dndTextField;
    NSTextField *_dndDescriptionTextField;
    NSButton *_dndButton;
    NSLayoutConstraint *_descriptionHeightConstraint;
    NSLayoutConstraint *_descriptionHeightMaxConstraint;
    NSLayoutConstraint *_textCenteringConstraint;
    NSLayoutConstraint *_switchCenteringConstraint;
    NSString *_disabledDescription;
    CDUnknownBlockType _changedBlock;
}

@property(copy) CDUnknownBlockType changedBlock; // @synthesize changedBlock=_changedBlock;
@property(copy) NSString *disabledDescription; // @synthesize disabledDescription=_disabledDescription;
@property(nonatomic) BOOL doNotDisturb; // @synthesize doNotDisturb=_doNotDisturb;
@property NSLayoutConstraint *switchCenteringConstraint; // @synthesize switchCenteringConstraint=_switchCenteringConstraint;
@property NSLayoutConstraint *textCenteringConstraint; // @synthesize textCenteringConstraint=_textCenteringConstraint;
@property NSLayoutConstraint *descriptionHeightMaxConstraint; // @synthesize descriptionHeightMaxConstraint=_descriptionHeightMaxConstraint;
@property NSLayoutConstraint *descriptionHeightConstraint; // @synthesize descriptionHeightConstraint=_descriptionHeightConstraint;
@property(retain) NSButton *dndButton; // @synthesize dndButton=_dndButton;
@property(retain) NSTextField *dndDescriptionTextField; // @synthesize dndDescriptionTextField=_dndDescriptionTextField;
@property(retain) NSTextField *dndTextField; // @synthesize dndTextField=_dndTextField;
@property NSView *textContainer; // @synthesize textContainer=_textContainer;
- (double)height;
@property(retain) NSView *view; // @synthesize view=_view;
- (void).cxx_destruct;
- (void)switchActivated:(id)arg1;
- (void)_hideDescriptionTextField:(BOOL)arg1;
- (void)_animateViewChangesWithDuration:(float)arg1 block:(CDUnknownBlockType)arg2;
- (void)awakeFromNib;
- (void)dealloc;
- (id)initForWidth:(double)arg1;

@end

@interface NCShareButtonCell : NSButtonCell
{
    NSDictionary *_textAttributes;
    NSImage *_titleImage;
}

@property(retain) NSImage *titleImage; // @synthesize titleImage=_titleImage;
- (void).cxx_destruct;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
@property(readonly) float fittingWidth;
- (void)awakeFromNib;
- (void)drawFocusRingMaskWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGRect)focusRingMaskBoundsForFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;

@end

@interface NCTableCellView : NSTableCellView
{
    NSView *_innerLayoutView;
}

@property NSView *innerLayoutView; // @synthesize innerLayoutView=_innerLayoutView;
@property(readonly, nonatomic) double leftMarginWidth;

@end

@interface NCScrollView : NSScrollView
{
}

+ (Class)_horizontalScrollerClass;
+ (Class)_verticalScrollerClass;
- (void)tile;
@property(readonly) _NCClipView *clipView;
- (void)_viewScrolled:(id)arg1;
- (void)dealloc;
- (void)awakeFromNib;
- (long long)scrollerStyle;

@end

@interface NCScroller : NSScroller
{
}

+ (double)scrollerWidthForControlSize:(unsigned long long)arg1 scrollerStyle:(long long)arg2;
+ (BOOL)isCompatibleWithOverlayScrollers;
- (void)drawKnob;
- (void)drawKnobSlotInRect:(struct CGRect)arg1 highlight:(BOOL)arg2;
- (BOOL)isOpaque;
- (BOOL)_isVertical;

@end

@interface _NCClipView : NSClipView
{
    CAGradientLayer *_gradientMask;
}

- (void).cxx_destruct;
- (void)viewBoundsChanged:(id)arg1;
- (void)viewFrameChanged:(id)arg1;
- (void)setFrame:(struct CGRect)arg1;
- (void)_updateMaskFrame;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface NCListViewController : NSViewController
{
}

+ (id)keyPathsForValuesAffectingModel;
@property(readonly) NCModel *model;
- (void)updateDate;

// Remaining properties
@property(readonly) float height; // @dynamic height;

@end

@interface NCProgressAlertViewController : NCBaseBannerViewController
{
    NSByteCountFormatter *_bytesFormatter;
    double _lastUpdateTime;
    NSObject<OS_dispatch_source> *_update_source;
    NSProgressIndicator *_progressIndicator;
    NSImageView *_imageView;
    NSTextField *_descriptionField;
    NSTextField *_statusField;
    NSString *_descriptionString;
    NSString *_statusString;
}

@property(retain) NSString *statusString; // @synthesize statusString=_statusString;
@property(retain) NSString *descriptionString; // @synthesize descriptionString=_descriptionString;
@property NSTextField *statusField; // @synthesize statusField=_statusField;
@property NSTextField *descriptionField; // @synthesize descriptionField=_descriptionField;
@property NSImageView *imageView; // @synthesize imageView=_imageView;
@property NSProgressIndicator *progressIndicator; // @synthesize progressIndicator=_progressIndicator;
- (void).cxx_destruct;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)_byteCountString;
- (void)_updateProgressAndStatus;
- (void)setValue:(id)arg1;
- (id)nibName;
- (void)loadView;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface NCBaseBannerViewController : NSViewController
{
    BOOL _allowSingleLineMode;
    BOOL _tallMode;
    BOOL _lockscreenMode;
    NCModel *_value;
    id <NCBannerViewControllerDelegate> _delegate;
}

@property __weak id <NCBannerViewControllerDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain) NCModel *value; // @synthesize value=_value;
@property(nonatomic) BOOL lockscreenMode; // @synthesize lockscreenMode=_lockscreenMode;
@property(nonatomic) BOOL tallMode; // @synthesize tallMode=_tallMode;
@property(nonatomic) BOOL allowSingleLineMode; // @synthesize allowSingleLineMode=_allowSingleLineMode;
- (void).cxx_destruct;
- (BOOL)updateBodyWidthConstraint;
- (void)updateLiveDate;
- (void)addTalkingAlertProperties:(id)arg1;
- (void)updateViewsFromModel;
- (void)pulseIcon;
- (void)setLockscreenModeWithoutUpdate:(BOOL)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface NCListNotificationViewController : NCListViewController
{
    NSArray *_accessibilityProxies;
    BOOL _timeInFuture;
    NSString *_timeString;
    float _originalSubtitleHeight;
    float _originalBodyHeight;
    float _originalBodyBottom;
    float _originalBodyToTime2;
    float _originalTopConstant;
    float _originalTime2Height;
    float _originalTime2Bottom;
    float _originalTime2Right;
    float _originalTitletoTime2;
    float _originalInlineImageBottom;
    float _height;
    NSLayoutConstraint *_bodyHeightConstraint;
    NSLayoutConstraint *_bodyBottomConstraint;
    NSLayoutConstraint *_bodyToTime2Constraint;
    NSLayoutConstraint *_titleTopConstraint;
    NSLayoutConstraint *_titleToTime2Constraint;
    NSLayoutConstraint *_subtitleHeightConstraint;
    NSLayoutConstraint *_imageMaxHeightConstraint;
    NSLayoutConstraint *_imageMaxWidthConstraint;
    NSLayoutConstraint *_imageBottomConstraint;
    NSLayoutConstraint *_time2HeightConstraint;
    NSLayoutConstraint *_time2BottomConstraint;
    NSLayoutConstraint *_time2RightConstraint;
    NSImageView *_imageView;
    NCImageFramedView *_inlineImageView;
    NSTextField *_titleTF;
    NSTextField *_subtitleTF;
    NSTextField *_timeTF;
    NSTextField *_time2TF;
    NSTextField *_bodyTF;
}

@property NSTextField *bodyTF; // @synthesize bodyTF=_bodyTF;
@property NSTextField *time2TF; // @synthesize time2TF=_time2TF;
@property NSTextField *timeTF; // @synthesize timeTF=_timeTF;
@property NSTextField *subtitleTF; // @synthesize subtitleTF=_subtitleTF;
@property NSTextField *titleTF; // @synthesize titleTF=_titleTF;
@property NCImageFramedView *inlineImageView; // @synthesize inlineImageView=_inlineImageView;
@property NSImageView *imageView; // @synthesize imageView=_imageView;
@property NSLayoutConstraint *time2RightConstraint; // @synthesize time2RightConstraint=_time2RightConstraint;
@property NSLayoutConstraint *time2BottomConstraint; // @synthesize time2BottomConstraint=_time2BottomConstraint;
@property NSLayoutConstraint *time2HeightConstraint; // @synthesize time2HeightConstraint=_time2HeightConstraint;
@property NSLayoutConstraint *imageBottomConstraint; // @synthesize imageBottomConstraint=_imageBottomConstraint;
@property NSLayoutConstraint *imageMaxWidthConstraint; // @synthesize imageMaxWidthConstraint=_imageMaxWidthConstraint;
@property NSLayoutConstraint *imageMaxHeightConstraint; // @synthesize imageMaxHeightConstraint=_imageMaxHeightConstraint;
@property NSLayoutConstraint *subtitleHeightConstraint; // @synthesize subtitleHeightConstraint=_subtitleHeightConstraint;
@property NSLayoutConstraint *titleToTime2Constraint; // @synthesize titleToTime2Constraint=_titleToTime2Constraint;
@property NSLayoutConstraint *titleTopConstraint; // @synthesize titleTopConstraint=_titleTopConstraint;
@property NSLayoutConstraint *bodyToTime2Constraint; // @synthesize bodyToTime2Constraint=_bodyToTime2Constraint;
@property NSLayoutConstraint *bodyBottomConstraint; // @synthesize bodyBottomConstraint=_bodyBottomConstraint;
@property NSLayoutConstraint *bodyHeightConstraint; // @synthesize bodyHeightConstraint=_bodyHeightConstraint;
- (float)height;
- (void).cxx_destruct;
- (void)updateDate;
- (void)setRepresentedObject:(id)arg1;
- (void)_layoutView;
- (void)_ncupdateViewConstraints;
- (_Bool)updateDataContent;
- (void)updateViewContent;
- (BOOL)wantsUpdateLayer;
@property(readonly) NSColor *shadowColor;
@property(readonly) NSColor *textColor;
- (void)awakeFromNib;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface NCListImageView : NSImageView
{
    CALayer *_bezel;
    CALayer *_topBezel;
    CALayer *_bottmBezel;
}

- (void).cxx_destruct;
- (void)updateLayer;
- (BOOL)wantsUpdateLayer;
- (void)awakeFromNib;

@end

@interface _NCListBackgroundView : NSView
{
    NCListNotificationViewController *_owner;
}

@property __weak NCListNotificationViewController *owner; // @synthesize owner=_owner;
- (void).cxx_destruct;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)updateConstraints;

@end

@interface NCListProgressViewController : NCListViewController
{
    float _maxTimeWidth;
    float _originalTimeHeight;
    NSObject<OS_dispatch_source> *_update_timer;
    double _lastUpdateTime;
    NSProgressIndicator *_progressIndicator;
    NSTextField *_timeTextField;
    NSTextField *_progressDescriptionField;
    NSLayoutConstraint *_timeTextWidthConstraint;
}

+ (id)keyPathsForValuesAffectingRepresentedObject;
@property NSLayoutConstraint *timeTextWidthConstraint; // @synthesize timeTextWidthConstraint=_timeTextWidthConstraint;
@property NSTextField *progressDescriptionField; // @synthesize progressDescriptionField=_progressDescriptionField;
@property NSTextField *timeTextField; // @synthesize timeTextField=_timeTextField;
@property NSProgressIndicator *progressIndicator; // @synthesize progressIndicator=_progressIndicator;
- (void).cxx_destruct;
- (void)_updateProgressAndStatus;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)setRepresentedObject:(id)arg1;
- (void)loadView;
- (float)height;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

// Remaining properties
@property(readonly) NCModel *model;

@end

@interface NCImageFramedView : NSView
{
    CALayer *_borderLayer;
    CALayer *_matteLayer;
    CALayer *_imageLayer;
    NSImage *_image;
    struct CGSize _size;
}

+ (double)widthForImageWithSize:(struct CGSize)arg1 viewHeight:(double)arg2;
@property struct CGSize size; // @synthesize size=_size;
@property(retain, nonatomic) NSImage *image; // @synthesize image=_image;
- (void).cxx_destruct;
- (void)layout;
- (struct CGSize)intrinsicContentSize;
- (void)awakeFromNib;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface NCPlaceholderAlert : NCNotificationWindow
{
    NCWindowPluginLayerView *_pluginView;
    unsigned int _wid;
    unsigned long long _height;
    _Bool _windowInPlace;
    NCAlertProvider *_provider;
    NSLayoutConstraint *_heightConstraint;
}

@property(retain) NSLayoutConstraint *heightConstraint; // @synthesize heightConstraint=_heightConstraint;
@property(readonly) _Bool windowInPlace; // @synthesize windowInPlace=_windowInPlace;
@property __weak NCAlertProvider *provider; // @synthesize provider=_provider;
- (void).cxx_destruct;
- (void)animateWindowResize:(unsigned long long)arg1;
@property(readonly, nonatomic) _Bool windowIsOrdered;
- (void)windowReplacedView;
- (void)windowAnimateInComplete;
- (unsigned long long)minNotificationHeight;
- (unsigned long long)maxNotificationHeight;
- (id)nibName;
- (BOOL)hasContentView;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithWindowID:(unsigned int)arg1 height:(unsigned long long)arg2;

@end

@interface NCPeriodicMessageTrace : PeriodicMessageTrace
{
}

+ (id)defaultMessageTrace;

@end

@interface NCAlertProvider : NSObject
{
    NSObject<OS_xpc_object> *_peer;
    NCPlaceholderAlert *_placeholderAlert;
    id <NCAlertProviderDelegate> _delegate;
}

@property(readonly) NCPlaceholderAlert *placeholderAlert; // @synthesize placeholderAlert=_placeholderAlert;
@property(readonly) id <NCAlertProviderDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)removeAlert;
- (void)_resizeEvent:(id)arg1;
- (void)_addEvent:(id)arg1;
- (void)_getInfo:(id)arg1;
- (void)_registerEventHandler:(id)arg1;
- (void)_handleEvent:(id)arg1;
- (void)animationComplete;
- (void)dealloc;
- (id)initWihtPeer:(id)arg1 delegate:(id)arg2;

@end

@interface NCAlertScrollView : NSScrollView
{
    CALayer *_lineLayer;
    CALayer *_shadowLayer;
    CAGradientLayer *_verticalMaskGradient;
    CAGradientLayer *_horizontalMaskGradient;
    struct CGSize _lineSize;
    struct CGSize _shadowSize;
    _Bool _acceptsScroll;
    double _buttonGradientAmount;
    double _intrinsicHeight;
}

+ (Class)_horizontalScrollerClass;
+ (Class)_verticalScrollerClass;
@property(readonly) CALayer *shadowLayer; // @synthesize shadowLayer=_shadowLayer;
@property(readonly) CALayer *lineLayer; // @synthesize lineLayer=_lineLayer;
@property(nonatomic) double intrinsicHeight; // @synthesize intrinsicHeight=_intrinsicHeight;
@property(nonatomic) double buttonGradientAmount; // @synthesize buttonGradientAmount=_buttonGradientAmount;
@property _Bool acceptsScroll; // @synthesize acceptsScroll=_acceptsScroll;
- (void).cxx_destruct;
- (void)layout;
- (void)_updateLayerMasksToBoundsFromView;
- (BOOL)clipsToBounds;
- (void)viewScrolled:(id)arg1;
- (struct CGSize)intrinsicContentSize;
- (void)_setHorizontalMask;
- (void)scrollWheel:(id)arg1;
- (void)awakeFromNib;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;
- (long long)scrollerStyle;

@end

@interface _NCAlertClipView : NSClipView
{
}

- (void)viewFrameChanged:(id)arg1;
- (void)setFrame:(struct CGRect)arg1;
- (void)_updateLayersBasedOnSize;
- (BOOL)isFlipped;

@end

@interface NCReplyTextView : NSTextView
{
}

- (id)itemsForSharingServiceInRanges:(id)arg1;
- (BOOL)becomeFirstResponder;
- (void)didChangeText;
- (struct CGSize)intrinsicContentSize;
- (void)awakeFromNib;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface _NCReplyScrollView : NSScrollView
{
    CALayer *_imageLayer;
}

- (void).cxx_destruct;
- (struct CGSize)intrinsicContentSize;
- (struct CGSize)contentSize;
- (void)_updateLayerMasksToBoundsFromView;
- (BOOL)clipsToBounds;
- (void)layout;
- (void)viewDidChangeBackingProperties;
- (void)awakeFromNib;

@end

@interface _NCAlertButtonCell : NSButtonCell
{
}

- (struct CGRect)_imageRectWithRect:(struct CGRect *)arg1;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)alertButton;
- (BOOL)accessibilityIsIgnored;

@end

@interface _NCAlertButtonPopUpButtonCell : NSPopUpButtonCell
{
}

- (BOOL)_positionsMenuRelativeToRightEdge;

@end

@interface NCAlertButton : NSButton
{
    NSPopUpButtonCell *_delayedPopupCell;
    NSObject<OS_dispatch_source> *_timer;
    id _observer;
    _Bool _menuShown;
    _Bool _showsDropdownArrow;
    _Bool _alwaysDropdown;
    _Bool __showingPopupMenu;
    id <NCAlertButtonDelegate> _delegate;
}

@property _Bool _showingPopupMenu; // @synthesize _showingPopupMenu=__showingPopupMenu;
@property _Bool alwaysDropdown; // @synthesize alwaysDropdown=_alwaysDropdown;
@property(nonatomic) _Bool showsDropdownArrow; // @synthesize showsDropdownArrow=_showsDropdownArrow;
@property __weak id <NCAlertButtonDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)__popupAction:(id)arg1;
@property(readonly, nonatomic) NSMenu *_popupMenu;
- (void)_buildAndShowMenu;
- (void)mouseUp:(id)arg1;
- (void)mouseDown:(id)arg1;
@property(readonly, nonatomic) _Bool hasPopupMenu;

@end

@interface NCDNDController : NSObject <_NCDNDScheduleDelegate>
{
    _NCDNDSchedule *_scheduled;
    _NCDNDSchedule *_userResetSchedule;
    NSObject<OS_dispatch_source> *_refreshTimer;
    NSObject<OS_dispatch_source> *_displayReconfigTimer;
    unsigned int _rootdomain;
    int _pushDNDNotificationToken;
    int _timeNotifier;
    _Bool _turnOnWhenMirrored;
    _Bool _turnedOnByUser;
    _Bool _displayIsMirrored;
    _Bool _presentationModeTakesOverScreen;
    _Bool _userChangedMode;
    _Bool _userSpecifiedValue;
    _Bool _userChangedWhileMirrored;
    _Bool _displaysSleeping;
    _Bool _dndOnDisplaySleep;
    _Bool _screenLocked;
    _Bool _hasBuiltInDisplay;
    _Bool _clamshellOpen;
    _Bool _hasClamshell;
    int _usableDisplays;
    _Bool _facetimeCanBreakDND;
    _Bool _pushDNDEnabled;
    _Bool _notificationWakeSupported;
    _Bool _dndEnabled;
    _Bool _inDarkWake;
    int _reason;
    NCDNDWidget *_widget;
}

@property _Bool inDarkWake; // @synthesize inDarkWake=_inDarkWake;
@property(readonly) int reason; // @synthesize reason=_reason;
@property(readonly) _Bool pushDNDEnabled; // @synthesize pushDNDEnabled=_pushDNDEnabled;
@property _Bool dndEnabled; // @synthesize dndEnabled=_dndEnabled;
@property(readonly) NCDNDWidget *widget; // @synthesize widget=_widget;
@property(readonly) _Bool notificationWakeSupported; // @synthesize notificationWakeSupported=_notificationWakeSupported;
@property(readonly) _NCDNDSchedule *_dndScheduled; // @synthesize _dndScheduled=_scheduled;
- (void).cxx_destruct;
- (void)scheduleTimerDidFire:(id)arg1;
- (void)reEvaluateDNDValueNow;
- (void)reEvaluateDNDValue;
- (void)messageTracePreferencesWithSortPref:(id)arg1 shareWidgetShowPref:(_Bool)arg2;
- (void)_updateReasonDescription;
- (id)_reasonStringForSchedule;
- (void)_consoleConnected;
- (void)_watchForWakeNotifications;
- (_Bool)_clamshellIsOpen;
- (void)_significantTimeChange;
- (void)_cancelUserDNDCancel;
- (void)setDisplaySleeping:(_Bool)arg1;
- (void)_prefsChanged:(id)arg1;
- (void)_displayConfigurationChangedNow;
- (void)displayConfigurationChanged;
- (void)_watchForClamshellChanges;
- (void)updatePresentationMode:(id)arg1;
- (void)checkMirrorStatus;
- (void)userSwitchedDNDOn;
- (void)userSwitchedDNDOff;
@property(readonly, nonatomic) _Bool consoleConnected;
@property(readonly, nonatomic) NSDictionary *dndDump;
@property(readonly, nonatomic) _Bool inPresentationMode;
- (id)initWithWidget:(id)arg1;

@end

@interface _NCDNDSchedule : NSObject
{
    double _nextStartDate;
    double _nextEndDate;
    NSObject<OS_dispatch_source> *_timer;
    _Bool _untilMidnight;
    _Bool _invalidated;
    id <_NCDNDScheduleDelegate> _delegate;
    double _start;
    double _end;
}

@property(readonly) double nextEndDate; // @synthesize nextEndDate=_nextEndDate;
@property(readonly) double nextStartDate; // @synthesize nextStartDate=_nextStartDate;
@property(readonly) double end; // @synthesize end=_end;
@property(readonly) double start; // @synthesize start=_start;
@property __weak id <_NCDNDScheduleDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)recalculateSchedule;
@property(readonly, nonatomic) double timeFromNowUntilNextDNDTransition;
@property(readonly, nonatomic) _Bool inScheduldTime;
- (void)invalidate;
- (id)initFromNowUntilMidnightWithDelegate:(id)arg1;
- (id)initWithStart:(double)arg1 end:(double)arg2 delegate:(id)arg3;

@end

@interface NSUserNotification (NCSourceIdentifier)
@property(retain) NCSourceIdentifier *_sourceIdentifier;
- (id)copy_nc;
@end

@interface NSCalendar (NCDateExtensions)
- (long long)yearsWithinEraFromDate:(id)arg1 toDate:(id)arg2;
- (long long)daysWithinEraFromDate:(id)arg1 toDate:(id)arg2;
@end

@interface NSBundle (CGImageLoading)
- (struct CGImage *)cgImageForResource:(id)arg1;
@end

@interface NSHashTable (NCHelpers)
+ (id)pointerHashTableWithObjects:(id)arg1;
@end

@interface NSUserNotification (NCHelpers)
+ (id)keyPathsForValuesAffectingScaledContentImage;
+ (id)keyPathsForValuesAffectingIdentityImage;
- (void)setAlternateActionIndex:(unsigned long long)arg1;
- (void)clearScaledContentImage;
@property(readonly, nonatomic) NSImage *scaledContentImage;
- (void)clearIdentityImage;
@property(readonly, nonatomic) NSImage *identityImage;
@end

@interface NSView (imageGeneration)
- (id)_renderImageOfContents;
@end
